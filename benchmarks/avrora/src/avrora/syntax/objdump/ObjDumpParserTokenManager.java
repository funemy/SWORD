/* Generated By:JavaCC: Do not edit this line. ObjDumpParserTokenManager.java */
package avrora.syntax.objdump;

import cck.parser.SimpleCharStream;

import java.io.IOException;

public class ObjDumpParserTokenManager implements ObjDumpParserConstants {

    private int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2) {
        switch (pos) {
            case 0:
                if ((active0 & 0x7fae30000L) != 0L || (active1 & 0xfffffffff8000000L) != 0L || (active2 & 0x1fffffL) != 0L)
                {
                    jjmatchedKind = 149;
                    return 23;
                }
                if ((active0 & 0x4000000L) != 0L || (active2 & 0x80000000L) != 0L) return 25;
                if ((active0 & 0xfffffff8011c0000L) != 0L || (active1 & 0x7ffffffL) != 0L) {
                    jjmatchedKind = 149;
                    return 33;
                }
                return -1;
            case 1:
                if ((active0 & 0xfffffdc7f3ff0000L) != 0L || (active1 & 0xffff3ff09ff07fe3L) != 0L || (active2 & 0x1f1fffL) != 0L)
                {
                    if (jjmatchedPos != 1) {
                        jjmatchedKind = 149;
                        jjmatchedPos = 1;
                    }
                    return 23;
                }
                if ((active0 & 0x8000000L) != 0L || (active1 & 0xc00f60078000L) != 0L || (active2 & 0xe000L) != 0L)
                    return 23;
                if ((active0 & 0x4000000L) != 0L) {
                    if (jjmatchedPos != 1) {
                        jjmatchedKind = 152;
                        jjmatchedPos = 1;
                    }
                    return 26;
                }
                if ((active0 & 0x23800000000L) != 0L || (active1 & 0x8001cL) != 0L) {
                    if (jjmatchedPos != 1) {
                        jjmatchedKind = 149;
                        jjmatchedPos = 1;
                    }
                    return 33;
                }
                return -1;
            case 2:
                if ((active0 & 0xfffffa24ebfe0000L) != 0L || (active1 & 0x4c00001f740005L) != 0L || (active2 & 0x40800L) != 0L)
                {
                    if (jjmatchedPos != 2) {
                        jjmatchedKind = 149;
                        jjmatchedPos = 2;
                    }
                    return 23;
                }
                if ((active0 & 0x1800000000L) != 0L || (active1 & 0x80000L) != 0L) return 33;
                if ((active0 & 0x5c310010000L) != 0L || (active1 & 0xffb3bffec0837ffaL) != 0L || (active2 & 0x1bd7ffL) != 0L)
                    return 23;
                if ((active0 & 0x4000000L) != 0L) {
                    if (jjmatchedPos != 2) {
                        jjmatchedKind = 152;
                        jjmatchedPos = 2;
                    }
                    return 26;
                }
                return -1;
            case 3:
                if ((active0 & 0x4000000L) != 0L) {
                    if (jjmatchedPos != 3) {
                        jjmatchedKind = 152;
                        jjmatchedPos = 3;
                    }
                    return 26;
                }
                if ((active0 & 0x8004781c0000L) != 0L || (active1 & 0x8000008300000L) != 0L || (active2 & 0x800L) != 0L)
                {
                    if (jjmatchedPos != 3) {
                        jjmatchedKind = 149;
                        jjmatchedPos = 3;
                    }
                    return 23;
                }
                if ((active0 & 0xffff7aa083e20000L) != 0L || (active1 & 0x74640d0017440005L) != 0L || (active2 & 0x60003L) != 0L)
                    return 23;
                return -1;
            case 4:
                if ((active0 & 0x4000000L) != 0L) return 26;
                if ((active0 & 0x8000481c0000L) != 0L || (active1 & 0x808000e200000L) != 0L || (active2 & 0x800L) != 0L)
                    return 23;
                if ((active0 & 0x430000000L) != 0L || (active1 & 0x100000L) != 0L) {
                    if (jjmatchedPos != 4) {
                        jjmatchedKind = 149;
                        jjmatchedPos = 4;
                    }
                    return 23;
                }
                return -1;
            case 5:
                if ((active0 & 0x30000000L) != 0L) {
                    jjmatchedKind = 149;
                    jjmatchedPos = 5;
                    return 23;
                }
                if ((active0 & 0x400000000L) != 0L || (active1 & 0x4100000L) != 0L) return 23;
                return -1;
            default :
                return -1;
        }
    }

    private int jjStartNfa_0(int pos, long active0, long active1, long active2) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
    }

    private int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    private int jjStartNfaWithStates_0(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }

    private int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
            case 43:
                return jjStopAtPos(0, 157);
            case 44:
                return jjStopAtPos(0, 156);
            case 45:
                return jjStopAtPos(0, 158);
            case 46:
                jjmatchedKind = 159;
                return jjMoveStringLiteralDfa1_0(0x4000000L, 0x0L, 0x0L);
            case 58:
                return jjStopAtPos(0, 154);
            case 59:
                return jjStopAtPos(0, 6);
            case 61:
                return jjStopAtPos(0, 155);
            case 65:
            case 97:
                return jjMoveStringLiteralDfa1_0(0x1f800000000L, 0x0L, 0x0L);
            case 66:
            case 98:
                return jjMoveStringLiteralDfa1_0(0xfffffe00001c0000L, 0x3L, 0x0L);
            case 67:
            case 99:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x7fffcL, 0x0L);
            case 68:
            case 100:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x80000L, 0x0L);
            case 69:
            case 101:
                return jjMoveStringLiteralDfa1_0(0x1000000L, 0xf00000L, 0x0L);
            case 70:
            case 102:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x7000000L, 0x0L);
            case 72:
            case 104:
                return jjMoveStringLiteralDfa1_0(0x420000L, 0x0L, 0x0L);
            case 73:
            case 105:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x78000000L, 0x0L);
            case 74:
            case 106:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000L, 0x0L);
            case 76:
            case 108:
                return jjMoveStringLiteralDfa1_0(0x242210000L, 0x7f00000000L, 0x0L);
            case 77:
            case 109:
                return jjMoveStringLiteralDfa1_0(0x0L, 0xf8000000000L, 0x0L);
            case 78:
            case 110:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x300000000000L, 0x0L);
            case 79:
            case 111:
                return jjMoveStringLiteralDfa1_0(0x400000000L, 0x1c00000000000L, 0x0L);
            case 80:
            case 112:
                return jjMoveStringLiteralDfa1_0(0x20800000L, 0x6000000000000L, 0x0L);
            case 82:
            case 114:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x1f8000000000000L, 0x0L);
            case 83:
            case 115:
                return jjMoveStringLiteralDfa1_0(0x98000000L, 0xfe00000000000000L, 0x7ffffL);
            case 84:
            case 116:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x80000L);
            case 86:
            case 118:
                return jjMoveStringLiteralDfa1_0(0x100000000L, 0x0L, 0x0L);
            case 87:
            case 119:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100000L);
            default :
                return jjMoveNfa_0(0, 0);
        }
    }

    private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2) {
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(0, active0, active1, active2);
            return 1;
        }
        switch (curChar) {
            case 65:
            case 97:
                return jjMoveStringLiteralDfa2_0(active0, 0x40800000L, active1, 0x4L, active2, 0L);
            case 66:
            case 98:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xfe00000000000018L, active2, 0x3L);
            case 67:
            case 99:
                return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0x8000008000000L, active2, 0L);
            case 68:
            case 100:
                if ((active1 & 0x100000000L) != 0L) {
                    jjmatchedKind = 96;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0x3800000000L, active1, 0xe00000000L, active2, 0x100000L);
            case 69:
            case 101:
                return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0x30100000080000L, active2, 0x7fcL);
            case 70:
            case 102:
                return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L, active2, 0L);
            case 73:
            case 105:
                return jjMoveStringLiteralDfa2_0(active0, 0x80020000L, active1, 0x300000L, active2, 0L);
            case 74:
            case 106:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000010000000L, active2, 0L);
            case 76:
            case 108:
                return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L, active1, 0x403fe0L, active2, 0x800L);
            case 77:
            case 109:
                return jjMoveStringLiteralDfa2_0(active0, 0x300000000L, active1, 0x87000000L, active2, 0L);
            case 78:
            case 110:
                if ((active1 & 0x20000000L) != 0L) {
                    jjmatchedKind = 93;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0xc000000000L, active1, 0x40000000L, active2, 0L);
            case 79:
            case 111:
                return jjMoveStringLiteralDfa2_0(active0, 0x2010000L, active1, 0x182218000804000L, active2, 0L);
            case 80:
            case 112:
                if ((active1 & 0x8000L) != 0L) {
                    jjmatchedKind = 79;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000070000L, active2, 0x1000L);
            case 82:
            case 114:
                if ((active1 & 0x400000000000L) != 0L) {
                    jjmatchedKind = 110;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0xfffff80020000000L, active1, 0x800000000000L, active2, 0L);
            case 83:
            case 115:
                return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L, active1, 0x6000000003L, active2, 0x80000L);
            case 84:
            case 116:
                if ((active2 & 0x2000L) != 0L) {
                    jjmatchedKind = 141;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0L, active2, 0xc000L);
            case 85:
            case 117:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x50e0000000000L, active2, 0x30000L);
            case 87:
            case 119:
                return jjMoveStringLiteralDfa2_0(active0, 0x4600000L, active1, 0L, active2, 0x40000L);
            case 88:
            case 120:
                return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L, active2, 0L);
            case 89:
            case 121:
                return jjMoveStringLiteralDfa2_0(active0, 0x1c0000L, active1, 0L, active2, 0L);
            default :
                break;
        }
        return jjStartNfa_0(0, active0, active1, active2);
    }

    private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
            return jjStartNfa_0(0, old0, old1, old2);
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(1, active0, active1, active2);
            return 2;
        }
        switch (curChar) {
            case 65:
            case 97:
                if ((active0 & 0x100000000L) != 0L) return jjStartNfaWithStates_0(2, 32, 23);
                else if ((active0 & 0x200000000L) != 0L) return jjStartNfaWithStates_0(2, 33, 23);
                return jjMoveStringLiteralDfa3_0(active0, 0x8000000L, active1, 0x8000008000000L, active2, 0x40000L);
            case 66:
            case 98:
                if ((active2 & 0x10000L) != 0L) {
                    jjmatchedKind = 144;
                    jjmatchedPos = 2;
                }
                return jjMoveStringLiteralDfa3_0(active0, 0x180040000000L, active1, 0L, active2, 0x20000L);
            case 67:
            case 99:
                if ((active0 & 0x1000000000L) != 0L) return jjStartNfaWithStates_0(2, 36, 33);
                else if ((active1 & 0x20L) != 0L) return jjStartNfaWithStates_0(2, 69, 23);
                else if ((active1 & 0x10000L) != 0L) return jjStartNfaWithStates_0(2, 80, 23);
                else if ((active1 & 0x80000L) != 0L) return jjStartNfaWithStates_0(2, 83, 33);
                else if ((active1 & 0x40000000L) != 0L) return jjStartNfaWithStates_0(2, 94, 23);
                else if ((active1 & 0x200000000000000L) != 0L) {
                    jjmatchedKind = 121;
                    jjmatchedPos = 2;
                } else if ((active2 & 0x4L) != 0L) {
                    jjmatchedKind = 130;
                    jjmatchedPos = 2;
                }
                return jjMoveStringLiteralDfa3_0(active0, 0x600010000000L, active1, 0x400000000100000L, active2, 0L);
            case 68:
            case 100:
                if ((active0 & 0x800000000L) != 0L) return jjStartNfaWithStates_0(2, 35, 33);
                else if ((active0 & 0x4000000000L) != 0L) {
                    jjmatchedKind = 38;
                    jjmatchedPos = 2;
                } else if ((active0 & 0x40000000000L) != 0L) return jjStartNfaWithStates_0(2, 42, 23);
                else if ((active1 & 0x200000000L) != 0L) return jjStartNfaWithStates_0(2, 97, 23);
                else if ((active2 & 0x4000L) != 0L) return jjStartNfaWithStates_0(2, 142, 23);
                return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0L, active2, 0L);
            case 69:
            case 101:
                return jjMoveStringLiteralDfa3_0(active0, 0x1800000000000L, active1, 0x1L, active2, 0x800L);
            case 70:
            case 102:
                return jjMoveStringLiteralDfa3_0(active0, 0x400000000L, active1, 0L, active2, 0L);
            case 71:
            case 103:
                if ((active1 & 0x100000000000L) != 0L) return jjStartNfaWithStates_0(2, 108, 23);
                return jjMoveStringLiteralDfa3_0(active0, 0x2000002820000L, active1, 0L, active2, 0L);
            case 72:
            case 104:
                if ((active1 & 0x40L) != 0L) return jjStartNfaWithStates_0(2, 70, 23);
                else if ((active2 & 0x8L) != 0L) return jjStartNfaWithStates_0(2, 131, 23);
                return jjMoveStringLiteralDfa3_0(active0, 0xc000000000000L, active1, 0L, active2, 0L);
            case 73:
            case 105:
                if ((active1 & 0x8L) != 0L) return jjStartNfaWithStates_0(2, 67, 23);
                else if ((active1 & 0x80L) != 0L) return jjStartNfaWithStates_0(2, 71, 23);
                else if ((active1 & 0x20000L) != 0L) return jjStartNfaWithStates_0(2, 81, 23);
                else if ((active1 & 0x400000000L) != 0L) return jjStartNfaWithStates_0(2, 98, 23);
                else if ((active1 & 0x800000000000L) != 0L) return jjStartNfaWithStates_0(2, 111, 23);
                else if ((active1 & 0x800000000000000L) != 0L) {
                    jjmatchedKind = 123;
                    jjmatchedPos = 2;
                } else if ((active2 & 0x10L) != 0L) return jjStartNfaWithStates_0(2, 132, 23);
                return jjMoveStringLiteralDfa3_0(active0, 0x30002000000000L, active1, 0x7000000000000000L, active2, 0L);
            case 74:
            case 106:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000L, active2, 0L);
            case 76:
            case 108:
                if ((active1 & 0x2000000000L) != 0L) return jjStartNfaWithStates_0(2, 101, 23);
                else if ((active1 & 0x20000000000L) != 0L) {
                    jjmatchedKind = 105;
                    jjmatchedPos = 2;
                } else if ((active1 & 0x80000000000000L) != 0L) return jjStartNfaWithStates_0(2, 119, 23);
                return jjMoveStringLiteralDfa3_0(active0, 0xc0020000000000L, active1, 0xc0000000004L, active2, 0L);
            case 77:
            case 109:
                if ((active1 & 0x4000L) != 0L) return jjStartNfaWithStates_0(2, 78, 23);
                else if ((active1 & 0x1000000000L) != 0L) return jjStartNfaWithStates_0(2, 100, 23);
                else if ((active2 & 0x1000L) != 0L) return jjStartNfaWithStates_0(2, 140, 23);
                return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0x40000010000000L, active2, 0L);
            case 78:
            case 110:
                if ((active1 & 0x100L) != 0L) return jjStartNfaWithStates_0(2, 72, 23);
                else if ((active2 & 0x20L) != 0L) return jjStartNfaWithStates_0(2, 133, 23);
                return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0L, active2, 0L);
            case 79:
            case 111:
                return jjMoveStringLiteralDfa3_0(active0, 0x24000000L, active1, 0L, active2, 0L);
            case 80:
            case 112:
                if ((active1 & 0x80000000L) != 0L) return jjStartNfaWithStates_0(2, 95, 23);
                else if ((active1 & 0x200000000000L) != 0L) return jjStartNfaWithStates_0(2, 109, 23);
                else if ((active1 & 0x2000000000000L) != 0L) return jjStartNfaWithStates_0(2, 113, 23);
                return jjMoveStringLiteralDfa3_0(active0, 0x400000001000000L, active1, 0x400000L, active2, 0L);
            case 82:
            case 114:
                if ((active0 & 0x10000000000L) != 0L) return jjStartNfaWithStates_0(2, 40, 23);
                else if ((active1 & 0x10L) != 0L) return jjStartNfaWithStates_0(2, 68, 23);
                else if ((active1 & 0x200L) != 0L) return jjStartNfaWithStates_0(2, 73, 23);
                else if ((active1 & 0x800000L) != 0L) return jjStartNfaWithStates_0(2, 87, 23);
                else if ((active1 & 0x4000000000L) != 0L) return jjStartNfaWithStates_0(2, 102, 23);
                else if ((active1 & 0x100000000000000L) != 0L) return jjStartNfaWithStates_0(2, 120, 23);
                else if ((active1 & 0x8000000000000000L) != 0L) {
                    jjmatchedKind = 127;
                    jjmatchedPos = 2;
                } else if ((active2 & 0x40L) != 0L) return jjStartNfaWithStates_0(2, 134, 23);
                else if ((active2 & 0x100000L) != 0L) return jjStartNfaWithStates_0(2, 148, 23);
                return jjMoveStringLiteralDfa3_0(active0, 0x600000L, active1, 0L, active2, 0x3L);
            case 83:
            case 115:
                if ((active1 & 0x400L) != 0L) return jjStartNfaWithStates_0(2, 74, 23);
                else if ((active1 & 0x800000000L) != 0L) return jjStartNfaWithStates_0(2, 99, 23);
                else if ((active2 & 0x80L) != 0L) return jjStartNfaWithStates_0(2, 135, 23);
                else if ((active2 & 0x8000L) != 0L) return jjStartNfaWithStates_0(2, 143, 23);
                return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0x4000000040000L, active2, 0L);
            case 84:
            case 116:
                if ((active1 & 0x2L) != 0L) return jjStartNfaWithStates_0(2, 65, 23);
                else if ((active1 & 0x800L) != 0L) return jjStartNfaWithStates_0(2, 75, 23);
                else if ((active1 & 0x1000000000000L) != 0L) return jjStartNfaWithStates_0(2, 112, 23);
                else if ((active1 & 0x10000000000000L) != 0L) {
                    jjmatchedKind = 116;
                    jjmatchedPos = 2;
                } else if ((active2 & 0x100L) != 0L) return jjStartNfaWithStates_0(2, 136, 23);
                else if ((active2 & 0x80000L) != 0L) return jjStartNfaWithStates_0(2, 147, 23);
                return jjMoveStringLiteralDfa3_0(active0, 0x30000000001c0000L, active1, 0x20000000000000L, active2, 0L);
            case 85:
            case 117:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x7000000L, active2, 0L);
            case 86:
            case 118:
                if ((active1 & 0x1000L) != 0L) return jjStartNfaWithStates_0(2, 76, 23);
                else if ((active1 & 0x8000000000L) != 0L) {
                    jjmatchedKind = 103;
                    jjmatchedPos = 2;
                } else if ((active2 & 0x200L) != 0L) return jjStartNfaWithStates_0(2, 137, 23);
                return jjMoveStringLiteralDfa3_0(active0, 0xc000000000000000L, active1, 0x10000000000L, active2, 0L);
            case 87:
            case 119:
                if ((active0 & 0x10000L) != 0L) return jjStartNfaWithStates_0(2, 16, 23);
                break;
            case 90:
            case 122:
                if ((active1 & 0x2000L) != 0L) return jjStartNfaWithStates_0(2, 77, 23);
                else if ((active2 & 0x400L) != 0L) return jjStartNfaWithStates_0(2, 138, 23);
                return jjMoveStringLiteralDfa3_0(active0, 0x80000000L, active1, 0L, active2, 0L);
            default :
                break;
        }
        return jjStartNfa_0(1, active0, active1, active2);
    }

    private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
            return jjStartNfa_0(1, old0, old1, old2);
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(2, active0, active1, active2);
            return 3;
        }
        switch (curChar) {
            case 50:
                if ((active0 & 0x1000000L) != 0L) return jjStartNfaWithStates_0(3, 24, 23);
                else if ((active0 & 0x2000000L) != 0L) return jjStartNfaWithStates_0(3, 25, 23);
                break;
            case 65:
            case 97:
                return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L, active1, 0x100000L, active2, 0L);
            case 67:
            case 99:
                if ((active0 & 0x80000000000L) != 0L) return jjStartNfaWithStates_0(3, 43, 23);
                else if ((active0 & 0x200000000000L) != 0L) return jjStartNfaWithStates_0(3, 45, 23);
                else if ((active0 & 0x4000000000000L) != 0L) return jjStartNfaWithStates_0(3, 50, 23);
                else if ((active0 & 0x1000000000000000L) != 0L) return jjStartNfaWithStates_0(3, 60, 23);
                else if ((active0 & 0x4000000000000000L) != 0L) return jjStartNfaWithStates_0(3, 62, 23);
                else if ((active1 & 0x1000000000000000L) != 0L) return jjStartNfaWithStates_0(3, 124, 23);
                else if ((active2 & 0x1L) != 0L) return jjStartNfaWithStates_0(3, 128, 23);
                break;
            case 68:
            case 100:
                if ((active0 & 0x200000L) != 0L) return jjStartNfaWithStates_0(3, 21, 23);
                else if ((active0 & 0x400000L) != 0L) return jjStartNfaWithStates_0(3, 22, 23);
                else if ((active0 & 0x10000000000000L) != 0L) return jjStartNfaWithStates_0(3, 52, 23);
                break;
            case 69:
            case 101:
                if ((active0 & 0x800000L) != 0L) return jjStartNfaWithStates_0(3, 23, 23);
                else if ((active0 & 0x80000000L) != 0L) return jjStartNfaWithStates_0(3, 31, 23);
                else if ((active0 & 0x2000000000000L) != 0L) return jjStartNfaWithStates_0(3, 49, 23);
                else if ((active0 & 0x20000000000000L) != 0L) return jjStartNfaWithStates_0(3, 53, 23);
                else if ((active0 & 0x200000000000000L) != 0L) return jjStartNfaWithStates_0(3, 57, 23);
                else if ((active1 & 0x40000L) != 0L) return jjStartNfaWithStates_0(3, 82, 23);
                return jjMoveStringLiteralDfa4_0(active0, 0x401c0000L, active1, 0L, active2, 0x800L);
            case 71:
            case 103:
                return jjMoveStringLiteralDfa4_0(active0, 0x20000000L, active1, 0L, active2, 0L);
            case 72:
            case 104:
                if ((active0 & 0x20000L) != 0L) return jjStartNfaWithStates_0(3, 17, 23);
                else if ((active0 & 0x800000000000000L) != 0L) return jjStartNfaWithStates_0(3, 59, 23);
                else if ((active1 & 0x4000000000000L) != 0L) return jjStartNfaWithStates_0(3, 114, 23);
                break;
            case 73:
            case 105:
                if ((active0 & 0x8000000000L) != 0L) return jjStartNfaWithStates_0(3, 39, 23);
                else if ((active0 & 0x100000000000000L) != 0L) return jjStartNfaWithStates_0(3, 56, 23);
                else if ((active1 & 0x20000000000000L) != 0L) return jjStartNfaWithStates_0(3, 117, 23);
                else if ((active1 & 0x400000000000000L) != 0L) return jjStartNfaWithStates_0(3, 122, 23);
                else if ((active2 & 0x20000L) != 0L) return jjStartNfaWithStates_0(3, 145, 23);
                break;
            case 76:
            case 108:
                if ((active0 & 0x400000000000000L) != 0L) return jjStartNfaWithStates_0(3, 58, 23);
                else if ((active1 & 0x4L) != 0L) return jjStartNfaWithStates_0(3, 66, 23);
                else if ((active1 & 0x1000000L) != 0L) {
                    jjmatchedKind = 88;
                    jjmatchedPos = 3;
                }
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000e000000L, active2, 0L);
            case 77:
            case 109:
                if ((active1 & 0x400000L) != 0L) return jjStartNfaWithStates_0(3, 86, 23);
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000L, active2, 0L);
            case 79:
            case 111:
                if ((active0 & 0x40000000000000L) != 0L) return jjStartNfaWithStates_0(3, 54, 23);
                break;
            case 80:
            case 112:
                if ((active1 & 0x10000000L) != 0L) return jjStartNfaWithStates_0(3, 92, 23);
                else if ((active1 & 0x40000000000000L) != 0L) return jjStartNfaWithStates_0(3, 118, 23);
                else if ((active2 & 0x40000L) != 0L) return jjStartNfaWithStates_0(3, 146, 23);
                break;
            case 81:
            case 113:
                if ((active0 & 0x1000000000000L) != 0L) return jjStartNfaWithStates_0(3, 48, 23);
                break;
            case 82:
            case 114:
                if ((active0 & 0x20000000000L) != 0L) return jjStartNfaWithStates_0(3, 41, 23);
                return jjMoveStringLiteralDfa4_0(active0, 0xc000000L, active1, 0L, active2, 0L);
            case 83:
            case 115:
                if ((active0 & 0x100000000000L) != 0L) return jjStartNfaWithStates_0(3, 44, 23);
                else if ((active0 & 0x400000000000L) != 0L) return jjStartNfaWithStates_0(3, 46, 23);
                else if ((active0 & 0x8000000000000L) != 0L) return jjStartNfaWithStates_0(3, 51, 23);
                else if ((active0 & 0x2000000000000000L) != 0L) return jjStartNfaWithStates_0(3, 61, 23);
                else if ((active0 & 0x8000000000000000L) != 0L) return jjStartNfaWithStates_0(3, 63, 23);
                else if ((active1 & 0x40000000000L) != 0L) {
                    jjmatchedKind = 106;
                    jjmatchedPos = 3;
                } else if ((active1 & 0x2000000000000000L) != 0L) return jjStartNfaWithStates_0(3, 125, 23);
                else if ((active2 & 0x2L) != 0L) return jjStartNfaWithStates_0(3, 129, 23);
                return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0x80000000000L, active2, 0L);
            case 84:
            case 116:
                if ((active0 & 0x80000000000000L) != 0L) return jjStartNfaWithStates_0(3, 55, 23);
                else if ((active1 & 0x1L) != 0L) return jjStartNfaWithStates_0(3, 64, 23);
                return jjMoveStringLiteralDfa4_0(active0, 0x10000000L, active1, 0L, active2, 0L);
            case 87:
            case 119:
                if ((active0 & 0x2000000000L) != 0L) return jjStartNfaWithStates_0(3, 37, 23);
                else if ((active1 & 0x10000000000L) != 0L) return jjStartNfaWithStates_0(3, 104, 23);
                else if ((active1 & 0x4000000000000000L) != 0L) return jjStartNfaWithStates_0(3, 126, 23);
                break;
            default :
                break;
        }
        return jjStartNfa_0(2, active0, active1, active2);
    }

    private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
            return jjStartNfa_0(2, old0, old1, old2);
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(3, active0, active1, active2);
            return 4;
        }
        switch (curChar) {
            case 50:
                if ((active0 & 0x40000L) != 0L) return jjStartNfaWithStates_0(4, 18, 23);
                break;
            case 51:
                if ((active0 & 0x80000L) != 0L) return jjStartNfaWithStates_0(4, 19, 23);
                break;
            case 52:
                if ((active0 & 0x100000L) != 0L) return jjStartNfaWithStates_0(4, 20, 23);
                break;
            case 68:
            case 100:
                if ((active0 & 0x4000000L) != 0L) return jjStartNfaWithStates_0(4, 26, 26);
                break;
            case 69:
            case 101:
                return jjMoveStringLiteralDfa5_0(active0, 0x400000000L, active1, 0L, active2, 0L);
            case 73:
            case 105:
                return jjMoveStringLiteralDfa5_0(active0, 0x10000000L, active1, 0L, active2, 0L);
            case 75:
            case 107:
                if ((active0 & 0x800000000000L) != 0L) return jjStartNfaWithStates_0(4, 47, 23);
                break;
            case 76:
            case 108:
                if ((active0 & 0x40000000L) != 0L) return jjStartNfaWithStates_0(4, 30, 23);
                else if ((active1 & 0x8000000L) != 0L) return jjStartNfaWithStates_0(4, 91, 23);
                else if ((active1 & 0x8000000000000L) != 0L) return jjStartNfaWithStates_0(4, 115, 23);
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000L, active2, 0L);
            case 80:
            case 112:
                if ((active1 & 0x200000L) != 0L) return jjStartNfaWithStates_0(4, 85, 23);
                else if ((active2 & 0x800L) != 0L) return jjStartNfaWithStates_0(4, 139, 23);
                break;
            case 82:
            case 114:
                return jjMoveStringLiteralDfa5_0(active0, 0x20000000L, active1, 0L, active2, 0L);
            case 83:
            case 115:
                if ((active1 & 0x2000000L) != 0L) {
                    jjmatchedKind = 89;
                    jjmatchedPos = 4;
                }
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000L, active2, 0L);
            case 84:
            case 116:
                if ((active0 & 0x8000000L) != 0L) return jjStartNfaWithStates_0(4, 27, 23);
                break;
            case 85:
            case 117:
                if ((active1 & 0x80000000000L) != 0L) return jjStartNfaWithStates_0(4, 107, 23);
                break;
            default :
                break;
        }
        return jjStartNfa_0(3, active0, active1, active2);
    }

    private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
            return jjStartNfa_0(3, old0, old1, old2);
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(4, active0, active1, 0L);
            return 5;
        }
        switch (curChar) {
            case 65:
            case 97:
                return jjMoveStringLiteralDfa6_0(active0, 0x20000000L, active1, 0L);
            case 76:
            case 108:
                if ((active1 & 0x100000L) != 0L) return jjStartNfaWithStates_0(5, 84, 23);
                break;
            case 79:
            case 111:
                return jjMoveStringLiteralDfa6_0(active0, 0x10000000L, active1, 0L);
            case 84:
            case 116:
                if ((active0 & 0x400000000L) != 0L) return jjStartNfaWithStates_0(5, 34, 23);
                break;
            case 85:
            case 117:
                if ((active1 & 0x4000000L) != 0L) return jjStartNfaWithStates_0(5, 90, 23);
                break;
            default :
                break;
        }
        return jjStartNfa_0(4, active0, active1, 0L);
    }

    private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L) return jjStartNfa_0(4, old0, old1, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(5, active0, 0L, 0L);
            return 6;
        }
        switch (curChar) {
            case 77:
            case 109:
                if ((active0 & 0x20000000L) != 0L) return jjStartNfaWithStates_0(6, 29, 23);
                break;
            case 78:
            case 110:
                if ((active0 & 0x10000000L) != 0L) return jjStartNfaWithStates_0(6, 28, 23);
                break;
            default :
                break;
        }
        return jjStartNfa_0(5, active0, 0L, 0L);
    }

    private void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    private void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    private void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

    static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };

    private int jjMoveNfa_0(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 33;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        while (true) {
            if (++jjround == 0x7fffffff) ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 33:
                            if ((0x3ff801000000000L & l) != 0L) {
                                if (kind > 149) kind = 149;
                                jjCheckNAdd(23);
                            }
                            if ((0x3ff000000000000L & l) != 0L) {
                                if (kind > 153) kind = 153;
                                jjCheckNAdd(27);
                            }
                            break;
                        case 0:
                            if ((0x3ff000000000000L & l) != 0L) {
                                if (kind > 153) kind = 153;
                                jjCheckNAdd(27);
                            } else if ((0x801000000000L & l) != 0L) {
                                if (kind > 149) kind = 149;
                                jjCheckNAdd(23);
                            } else if (curChar == 46) jjstateSet[jjnewStateCnt++] = 25;
                            else if (curChar == 34) jjCheckNAddStates(0, 2);
                            else if (curChar == 39) jjAddStates(3, 4);
                            if ((0x3fe000000000000L & l) != 0L) {
                                if (kind > 9) kind = 9;
                                jjCheckNAdd(1);
                            } else if (curChar == 48) {
                                if (kind > 9) kind = 9;
                                jjCheckNAddStates(5, 7);
                            } else if (curChar == 36) jjCheckNAdd(3);
                            break;
                        case 1:
                            if ((0x3ff000000000000L & l) == 0L) break;
                            if (kind > 9) kind = 9;
                            jjCheckNAdd(1);
                            break;
                        case 2:
                            if (curChar == 36) jjCheckNAdd(3);
                            break;
                        case 3:
                            if ((0x3ff000000000000L & l) == 0L) break;
                            if (kind > 9) kind = 9;
                            jjCheckNAdd(3);
                            break;
                        case 4:
                            if (curChar == 39) jjAddStates(3, 4);
                            break;
                        case 5:
                            if ((0xffffff7fffffdbffL & l) != 0L) jjCheckNAdd(6);
                            break;
                        case 6:
                            if (curChar == 39 && kind > 14) kind = 14;
                            break;
                        case 8:
                            if ((0x8400000000L & l) != 0L) jjCheckNAdd(6);
                            break;
                        case 9:
                            if ((0xff000000000000L & l) != 0L) jjCheckNAddTwoStates(10, 6);
                            break;
                        case 10:
                            if ((0xff000000000000L & l) != 0L) jjCheckNAdd(6);
                            break;
                        case 11:
                            if ((0xf000000000000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 12;
                            break;
                        case 12:
                            if ((0xff000000000000L & l) != 0L) jjCheckNAdd(10);
                            break;
                        case 13:
                            if (curChar == 34) jjCheckNAddStates(0, 2);
                            break;
                        case 14:
                            if ((0xfffffffbffffdbffL & l) != 0L) jjCheckNAddStates(0, 2);
                            break;
                        case 16:
                            if ((0x8400000000L & l) != 0L) jjCheckNAddStates(0, 2);
                            break;
                        case 17:
                            if (curChar == 34 && kind > 15) kind = 15;
                            break;
                        case 18:
                            if ((0xff000000000000L & l) != 0L) jjCheckNAddStates(8, 11);
                            break;
                        case 19:
                            if ((0xff000000000000L & l) != 0L) jjCheckNAddStates(0, 2);
                            break;
                        case 20:
                            if ((0xf000000000000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 21;
                            break;
                        case 21:
                            if ((0xff000000000000L & l) != 0L) jjCheckNAdd(19);
                            break;
                        case 22:
                            if ((0x801000000000L & l) == 0L) break;
                            if (kind > 149) kind = 149;
                            jjCheckNAdd(23);
                            break;
                        case 23:
                            if ((0x3ff801000000000L & l) == 0L) break;
                            if (kind > 149) kind = 149;
                            jjCheckNAdd(23);
                            break;
                        case 24:
                            if (curChar == 46) jjstateSet[jjnewStateCnt++] = 25;
                            break;
                        case 25:
                            if ((0x801000000000L & l) == 0L) break;
                            if (kind > 152) kind = 152;
                            jjCheckNAdd(26);
                            break;
                        case 26:
                            if ((0x3ff801000000000L & l) == 0L) break;
                            if (kind > 152) kind = 152;
                            jjCheckNAdd(26);
                            break;
                        case 27:
                            if ((0x3ff000000000000L & l) == 0L) break;
                            if (kind > 153) kind = 153;
                            jjCheckNAdd(27);
                            break;
                        case 28:
                            if (curChar != 48) break;
                            if (kind > 9) kind = 9;
                            jjCheckNAddStates(5, 7);
                            break;
                        case 31:
                            if ((0x3000000000000L & l) == 0L) break;
                            if (kind > 9) kind = 9;
                            jjstateSet[jjnewStateCnt++] = 31;
                            break;
                        case 32:
                            if ((0xff000000000000L & l) == 0L) break;
                            if (kind > 9) kind = 9;
                            jjCheckNAdd(32);
                            break;
                        default :
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 33:
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 149) kind = 149;
                                jjCheckNAdd(23);
                            }
                            if ((0x7e0000007eL & l) != 0L) {
                                if (kind > 153) kind = 153;
                                jjCheckNAdd(27);
                            }
                            break;
                        case 0:
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 149) kind = 149;
                                jjCheckNAdd(23);
                            }
                            if ((0x7e0000007eL & l) != 0L) {
                                if (kind > 153) kind = 153;
                                jjCheckNAdd(27);
                            }
                            break;
                        case 3:
                            if ((0x7e0000007eL & l) == 0L) break;
                            if (kind > 9) kind = 9;
                            jjCheckNAdd(3);
                            break;
                        case 5:
                            if ((0xffffffffefffffffL & l) != 0L) jjCheckNAdd(6);
                            break;
                        case 7:
                            if (curChar == 92) jjAddStates(12, 14);
                            break;
                        case 8:
                            if ((0x14404410144044L & l) != 0L) jjCheckNAdd(6);
                            break;
                        case 14:
                            if ((0xffffffffefffffffL & l) != 0L) jjCheckNAddStates(0, 2);
                            break;
                        case 15:
                            if (curChar == 92) jjAddStates(15, 17);
                            break;
                        case 16:
                            if ((0x14404410144044L & l) != 0L) jjCheckNAddStates(0, 2);
                            break;
                        case 22:
                            if ((0x7fffffe87fffffeL & l) == 0L) break;
                            if (kind > 149) kind = 149;
                            jjCheckNAdd(23);
                            break;
                        case 23:
                            if ((0x7fffffe87fffffeL & l) == 0L) break;
                            if (kind > 149) kind = 149;
                            jjCheckNAdd(23);
                            break;
                        case 25:
                        case 26:
                            if ((0x7fffffe87fffffeL & l) == 0L) break;
                            if (kind > 152) kind = 152;
                            jjCheckNAdd(26);
                            break;
                        case 27:
                            if ((0x7e0000007eL & l) == 0L) break;
                            if (kind > 153) kind = 153;
                            jjCheckNAdd(27);
                            break;
                        case 29:
                            if ((0x100000001000000L & l) != 0L) jjCheckNAdd(3);
                            break;
                        case 30:
                            if ((0x400000004L & l) != 0L) jjstateSet[jjnewStateCnt++] = 31;
                            break;
                        default :
                            break;
                    }
                } while (i != startsAt);
            } else {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 5:
                            if ((jjbitVec0[i2] & l2) != 0L) jjstateSet[jjnewStateCnt++] = 6;
                            break;
                        case 14:
                            if ((jjbitVec0[i2] & l2) != 0L) jjAddStates(0, 2);
                            break;
                        default :
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 33 - (jjnewStateCnt = startsAt))) return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (IOException e) {
                return curPos;
            }
        }
    }

    private int jjMoveStringLiteralDfa0_1() {
        return jjMoveNfa_1(0, 0);
    }

    private int jjMoveNfa_1(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 3;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        while (true) {
            if (++jjround == 0x7fffffff) ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0x2400L & l) != 0L) {
                                if (kind > 7) kind = 7;
                            }
                            if (curChar == 13) jjstateSet[jjnewStateCnt++] = 1;
                            break;
                        case 1:
                            if (curChar == 10 && kind > 7) kind = 7;
                            break;
                        case 2:
                            if (curChar == 13) jjstateSet[jjnewStateCnt++] = 1;
                            break;
                        default :
                            break;
                    }
                } while (i != startsAt);
            } else {
                do {
                    switch (jjstateSet[--i]) {
                        default :
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt))) return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (IOException e) {
                return curPos;
            }
        }
    }

    static final int[] jjnextStates = { 14, 15, 17, 5, 7, 29, 30, 32, 14, 15, 19, 17, 8, 9, 11, 16, 18, 20, };
    public static final String[] jjstrLiteralImages = { "", null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, "\72", "\75", "\54", "\53", "\55", "\56", };
    public static final int[] jjnewLexState = { -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, };
    static final long[] jjtoToken = { 0xffffffffffffc201L, 0xffffffffffffffffL, 0xff3fffffL, };
    static final long[] jjtoSkip = { 0xbeL, 0x0L, 0x0L, };
    static final long[] jjtoSpecial = { 0x80L, 0x0L, 0x0L, };
    protected SimpleCharStream input_stream;
    private final int[] jjrounds = new int[33];
    private final int[] jjstateSet = new int[66];
    int jjimageLen;
    protected char curChar;

    public ObjDumpParserTokenManager(SimpleCharStream stream) {
        input_stream = stream;
    }

    public ObjDumpParserTokenManager(SimpleCharStream stream, int lexState) {
        this(stream);
        SwitchTo(lexState);
    }

    private void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 33; i-- > 0;)
            jjrounds[i] = 0x80000000;
    }

    public void SwitchTo(int lexState) {
        if (lexState >= 2 || lexState < 0)
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". LegacyState unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
        else curLexState = lexState;
    }

    protected Token jjFillToken() {
        Token t = Token.newToken(jjmatchedKind);
        t.kind = jjmatchedKind;
        String im = jjstrLiteralImages[jjmatchedKind];
        t.image = im == null ? input_stream.GetImage() : im;
        t.beginLine = input_stream.getBeginLine();
        t.beginColumn = input_stream.getBeginColumn();
        t.endLine = input_stream.getEndLine();
        t.endColumn = input_stream.getEndColumn();
        return t;
    }

    int curLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    public Token getNextToken() {
        Token specialToken = null;
        Token matchedToken;
        int curPos = 0;

        EOFLoop :
        while (true) {
            try {
                curChar = input_stream.BeginToken();
            } catch (IOException e) {
                jjmatchedKind = 0;
                matchedToken = jjFillToken();
                return matchedToken;
            }
            jjimageLen = 0;

            while (true) {
                switch (curLexState) {
                    case 0:
                        try {
                            input_stream.backup(0);
                            while (curChar <= 32 && (0x100003600L & 1L << curChar) != 0L)
                                curChar = input_stream.BeginToken();
                        } catch (IOException e1) {
                            continue EOFLoop;
                        }
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_0();
                        break;
                    case 1:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_1();
                        if (jjmatchedPos == 0 && jjmatchedKind > 8) {
                            jjmatchedKind = 8;
                        }
                        break;
                }
                if (jjmatchedKind != 0x7fffffff) {
                    if (jjmatchedPos + 1 < curPos) input_stream.backup(curPos - jjmatchedPos - 1);
                    if ((jjtoToken[jjmatchedKind >> 6] & 1L << (jjmatchedKind & 077)) != 0L) {
                        matchedToken = jjFillToken();
                        if (jjnewLexState[jjmatchedKind] != -1) curLexState = jjnewLexState[jjmatchedKind];
                        return matchedToken;
                    } else if ((jjtoSkip[jjmatchedKind >> 6] & 1L << (jjmatchedKind & 077)) != 0L) {
                        if ((jjtoSpecial[jjmatchedKind >> 6] & 1L << (jjmatchedKind & 077)) == 0L)
                            SkipLexicalActions(null);
                        else {
                            matchedToken = jjFillToken();
                            if (specialToken == null) specialToken = matchedToken;
                            else {
                                specialToken = specialToken.next = matchedToken;
                            }
                            SkipLexicalActions(matchedToken);
                        }
                        if (jjnewLexState[jjmatchedKind] != -1) curLexState = jjnewLexState[jjmatchedKind];
                        continue EOFLoop;
                    }
                    jjimageLen += jjmatchedPos + 1;
                    if (jjnewLexState[jjmatchedKind] != -1) curLexState = jjnewLexState[jjmatchedKind];
                    curPos = 0;
                    jjmatchedKind = 0x7fffffff;
                    try {
                        curChar = input_stream.readChar();
                        continue;
                    } catch (IOException e1) {
                    }
                }
                int error_line = input_stream.getEndLine();
                int error_column = input_stream.getEndColumn();
                String error_after = null;
                boolean EOFSeen = false;
                try {
                    input_stream.readChar();
                    input_stream.backup(1);
                } catch (IOException e1) {
                    EOFSeen = true;
                    error_after = curPos <= 1 ? "" : input_stream.GetImage();
                    if (curChar == '\n' || curChar == '\r') {
                        error_line++;
                        error_column = 0;
                    } else error_column++;
                }
                if (!EOFSeen) {
                    input_stream.backup(1);
                    error_after = curPos <= 1 ? "" : input_stream.GetImage();
                }
                throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
            }
        }
    }

    void SkipLexicalActions(Token matchedToken) {
        switch (jjmatchedKind) {
            default :
                break;
        }
    }
}
