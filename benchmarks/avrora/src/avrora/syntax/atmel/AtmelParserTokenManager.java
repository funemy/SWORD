/* Generated By:JavaCC: Do not edit this line. AtmelParserTokenManager.java */
package avrora.syntax.atmel;

import cck.parser.SimpleCharStream;

import java.io.IOException;


public class AtmelParserTokenManager implements AtmelParserConstants {

    private int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2) {
        switch (pos) {
            case 0:
                if ((active0 & 0xffffffffffff0000L) != 0L || active1 != 0L || (active2 & 0x3fffL) != 0L) {
                    jjmatchedKind = 142;
                    return 23;
                }
                return -1;
            case 1:
                if ((active0 & 0xffffffffffff0000L) != 0L || (active1 & 0xfffffe7fe13ff0ffL) != 0L || (active2 & 0x3e3fL) != 0L)
                {
                    if (jjmatchedPos != 1) {
                        jjmatchedKind = 142;
                        jjmatchedPos = 1;
                    }
                    return 23;
                }
                if ((active1 & 0x1801ec00f00L) != 0L || (active2 & 0x1c0L) != 0L) return 23;
                return -1;
            case 2:
                if ((active0 & 0xbfffff44ff20000L) != 0L || (active1 & 0x9800003ee800L) != 0L || (active2 & 0x810L) != 0L)
                {
                    if (jjmatchedPos != 2) {
                        jjmatchedKind = 142;
                        jjmatchedPos = 2;
                    }
                    return 23;
                }
                if ((active0 & 0xf400000bb00d0000L) != 0L || (active1 & 0xffff677ffd8116ffL) != 0L || (active2 & 0x37afL) != 0L)
                    return 23;
                return -1;
            case 3:
                if ((active0 & 0xbfffef54f820000L) != 0L || (active1 & 0x6e8c81a002e8800L) != 0L || (active2 & 0xc00L) != 0L)
                    return 23;
                if ((active0 & 0x10000700000L) != 0L || (active1 & 0x100000106000L) != 0L || (active2 & 0x10L) != 0L)
                {
                    if (jjmatchedPos != 3) {
                        jjmatchedKind = 142;
                        jjmatchedPos = 3;
                    }
                    return 23;
                }
                return -1;
            case 4:
                if ((active1 & 0x2000L) != 0L) {
                    if (jjmatchedPos != 4) {
                        jjmatchedKind = 142;
                        jjmatchedPos = 4;
                    }
                    return 23;
                }
                if ((active0 & 0x10000700000L) != 0L || (active1 & 0x1010001c4000L) != 0L || (active2 & 0x10L) != 0L)
                    return 23;
                return -1;
            case 5:
                if ((active1 & 0x82000L) != 0L) return 23;
                return -1;
            default :
                return -1;
        }
    }

    private int jjStartNfa_0(int pos, long active0, long active1, long active2) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
    }

    private int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    private int jjStartNfaWithStates_0(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }

    private int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
            case 33:
                jjmatchedKind = 179;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40000000000L);
            case 38:
                jjmatchedKind = 168;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000000000L);
            case 40:
                return jjStopAtPos(0, 181);
            case 41:
                return jjStopAtPos(0, 182);
            case 42:
                return jjStopAtPos(0, 177);
            case 43:
                return jjStopAtPos(0, 146);
            case 44:
                return jjStopAtPos(0, 145);
            case 45:
                return jjStopAtPos(0, 147);
            case 46:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xfffa00000L);
            case 47:
                return jjStopAtPos(0, 178);
            case 58:
                return jjStopAtPos(0, 148);
            case 59:
                return jjStopAtPos(0, 6);
            case 60:
                jjmatchedKind = 173;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xc00000000000L);
            case 61:
                jjmatchedKind = 150;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20000000000L);
            case 62:
                jjmatchedKind = 171;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1100000000000L);
            case 94:
                return jjStopAtPos(0, 167);
            case 65:
            case 97:
                return jjMoveStringLiteralDfa1_0(0x3f0000000L, 0x0L, 0x0L);
            case 66:
            case 98:
                return jjMoveStringLiteralDfa1_0(0x7fffffc00700000L, 0x0L, 0x0L);
            case 67:
            case 99:
                return jjMoveStringLiteralDfa1_0(0xf800000000000000L, 0xfffL, 0x0L);
            case 68:
            case 100:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x1000L, 0x0L);
            case 69:
            case 101:
                return jjMoveStringLiteralDfa1_0(0x4000000L, 0x1e000L, 0x0L);
            case 70:
            case 102:
                return jjMoveStringLiteralDfa1_0(0x0L, 0xe0000L, 0x0L);
            case 72:
            case 104:
                return jjMoveStringLiteralDfa1_0(0x10a0000L, 0x0L, 0x0L);
            case 73:
            case 105:
                return jjMoveStringLiteralDfa1_0(0x0L, 0xf00000L, 0x0L);
            case 74:
            case 106:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000L, 0x0L);
            case 76:
            case 108:
                return jjMoveStringLiteralDfa1_0(0x8850000L, 0xfe000000L, 0x0L);
            case 77:
            case 109:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x1f00000000L, 0x0L);
            case 78:
            case 110:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x6000000000L, 0x0L);
            case 79:
            case 111:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x38000000000L, 0x0L);
            case 80:
            case 112:
                return jjMoveStringLiteralDfa1_0(0x2000000L, 0xc0000000000L, 0x0L);
            case 82:
            case 114:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x3f00000000000L, 0x0L);
            case 83:
            case 115:
                return jjMoveStringLiteralDfa1_0(0x0L, 0xfffc000000000000L, 0xfffL);
            case 84:
            case 116:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000L);
            case 87:
            case 119:
                return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000L);
            case 124:
                jjmatchedKind = 166;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000000000L);
            case 126:
                return jjStopAtPos(0, 180);
            default :
                return jjMoveNfa_0(0, 0);
        }
    }

    private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2) {
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(0, active0, active1, active2);
            return 1;
        }
        switch (curChar) {
            case 38:
                if ((active2 & 0x2000000000L) != 0L) return jjStopAtPos(1, 165);
                break;
            case 60:
                if ((active2 & 0x800000000000L) != 0L) return jjStopAtPos(1, 175);
                break;
            case 61:
                if ((active2 & 0x20000000000L) != 0L) return jjStopAtPos(1, 169);
                else if ((active2 & 0x40000000000L) != 0L) return jjStopAtPos(1, 170);
                else if ((active2 & 0x100000000000L) != 0L) return jjStopAtPos(1, 172);
                else if ((active2 & 0x400000000000L) != 0L) return jjStopAtPos(1, 174);
                break;
            case 62:
                if ((active2 & 0x1000000000000L) != 0L) return jjStopAtPos(1, 176);
                break;
            case 65:
            case 97:
                return jjMoveStringLiteralDfa2_0(active0, 0x800000002000000L, active1, 0L, active2, 0L);
            case 66:
            case 98:
                return jjMoveStringLiteralDfa2_0(active0, 0x3000000000000000L, active1, 0x7fc000000000000L, active2, 0x1000000L);
            case 67:
            case 99:
                return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0x100000100000L, active2, 0x400000000L);
            case 68:
            case 100:
                if ((active1 & 0x2000000L) != 0L) {
                    jjmatchedKind = 89;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0x70000000L, active1, 0x1c000000L, active2, 0x21e002000L);
            case 69:
            case 101:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xf800602000001000L, active2, 0x84020000fL);
            case 73:
            case 105:
                return jjMoveStringLiteralDfa2_0(active0, 0xa0000L, active1, 0x6000L, active2, 0x20000000L);
            case 74:
            case 106:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000200000L, active2, 0L);
            case 76:
            case 108:
                return jjMoveStringLiteralDfa2_0(active0, 0xc000000800000000L, active1, 0x807fL, active2, 0x100000010L);
            case 77:
            case 109:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10e0000L, active2, 0L);
            case 78:
            case 110:
                if ((active1 & 0x400000L) != 0L) {
                    jjmatchedKind = 86;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0x180000000L, active1, 0x800000L, active2, 0x80000000L);
            case 79:
            case 111:
                return jjMoveStringLiteralDfa2_0(active0, 0x8050000L, active1, 0x3044300010080L, active2, 0x800000L);
            case 80:
            case 112:
                if ((active1 & 0x100L) != 0L) {
                    jjmatchedKind = 72;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000e00L, active2, 0x20L);
            case 82:
            case 114:
                if ((active1 & 0x8000000000L) != 0L) {
                    jjmatchedKind = 103;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0x1fffff000000000L, active1, 0x10000000000L, active2, 0L);
            case 83:
            case 115:
                return jjMoveStringLiteralDfa2_0(active0, 0x600000200000000L, active1, 0xc0000000L, active2, 0x1000L);
            case 84:
            case 116:
                if ((active2 & 0x40L) != 0L) {
                    jjmatchedKind = 134;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x180L);
            case 85:
            case 117:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xa1c00000000L, active2, 0x600L);
            case 87:
            case 119:
                return jjMoveStringLiteralDfa2_0(active0, 0x1800000L, active1, 0L, active2, 0x800L);
            case 88:
            case 120:
                return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L, active2, 0L);
            case 89:
            case 121:
                return jjMoveStringLiteralDfa2_0(active0, 0x700000L, active1, 0L, active2, 0L);
            case 124:
                if ((active2 & 0x1000000000L) != 0L) return jjStopAtPos(1, 164);
                break;
            default :
                break;
        }
        return jjStartNfa_0(0, active0, active1, active2);
    }

    private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
            return jjStartNfa_0(0, old0, old1, old2);
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(1, active0, active1, active2);
            return 2;
        }
        switch (curChar) {
            case 56:
                if ((active0 & 0x40000L) != 0L) return jjStartNfaWithStates_0(2, 18, 23);
                else if ((active0 & 0x80000L) != 0L) return jjStartNfaWithStates_0(2, 19, 23);
                break;
            case 65:
            case 97:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000100000L, active2, 0x800L);
            case 66:
            case 98:
                if ((active2 & 0x200L) != 0L) {
                    jjmatchedKind = 137;
                    jjmatchedPos = 2;
                } else if ((active2 & 0x2000000L) != 0L) return jjStopAtPos(2, 153);
                return jjMoveStringLiteralDfa3_0(active0, 0x3000000000L, active1, 0L, active2, 0x400L);
            case 67:
            case 99:
                if ((active0 & 0x20000000L) != 0L) return jjStartNfaWithStates_0(2, 29, 23);
                else if ((active0 & 0x4000000000000000L) != 0L) return jjStartNfaWithStates_0(2, 62, 23);
                else if ((active1 & 0x200L) != 0L) return jjStartNfaWithStates_0(2, 73, 23);
                else if ((active1 & 0x1000L) != 0L) return jjStartNfaWithStates_0(2, 76, 23);
                else if ((active1 & 0x800000L) != 0L) return jjStartNfaWithStates_0(2, 87, 23);
                else if ((active1 & 0x4000000000000L) != 0L) {
                    jjmatchedKind = 114;
                    jjmatchedPos = 2;
                } else if ((active1 & 0x800000000000000L) != 0L) return jjStartNfaWithStates_0(2, 123, 23);
                return jjMoveStringLiteralDfa3_0(active0, 0xc000000000L, active1, 0x8000000002000L, active2, 0L);
            case 68:
            case 100:
                if ((active0 & 0x10000000L) != 0L) return jjStartNfaWithStates_0(2, 28, 23);
                else if ((active0 & 0x80000000L) != 0L) {
                    jjmatchedKind = 31;
                    jjmatchedPos = 2;
                } else if ((active0 & 0x800000000L) != 0L) return jjStartNfaWithStates_0(2, 35, 23);
                else if ((active1 & 0x4000000L) != 0L) return jjStartNfaWithStates_0(2, 90, 23);
                else if ((active2 & 0x80L) != 0L) return jjStartNfaWithStates_0(2, 135, 23);
                else if ((active2 & 0x8000000L) != 0L) return jjStopAtPos(2, 155);
                return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0L, active2, 0L);
            case 69:
            case 101:
                return jjMoveStringLiteralDfa3_0(active0, 0x200030000000000L, active1, 0L, active2, 0x10000010L);
            case 71:
            case 103:
                if ((active1 & 0x2000000000L) != 0L) return jjStartNfaWithStates_0(2, 101, 23);
                return jjMoveStringLiteralDfa3_0(active0, 0x4000a020000L, active1, 0L, active2, 0L);
            case 72:
            case 104:
                if ((active0 & 0x8000000000000000L) != 0L) return jjStartNfaWithStates_0(2, 63, 23);
                else if ((active1 & 0x1000000000000000L) != 0L) return jjStartNfaWithStates_0(2, 124, 23);
                return jjMoveStringLiteralDfa3_0(active0, 0x180000000000L, active1, 0L, active2, 0L);
            case 73:
            case 105:
                if ((active0 & 0x1000000000000000L) != 0L) return jjStartNfaWithStates_0(2, 60, 23);
                else if ((active1 & 0x1L) != 0L) return jjStartNfaWithStates_0(2, 64, 23);
                else if ((active1 & 0x400L) != 0L) return jjStartNfaWithStates_0(2, 74, 23);
                else if ((active1 & 0x8000000L) != 0L) return jjStartNfaWithStates_0(2, 91, 23);
                else if ((active1 & 0x10000000000L) != 0L) return jjStartNfaWithStates_0(2, 104, 23);
                else if ((active1 & 0x10000000000000L) != 0L) {
                    jjmatchedKind = 116;
                    jjmatchedPos = 2;
                } else if ((active1 & 0x2000000000000000L) != 0L) return jjStartNfaWithStates_0(2, 125, 23);
                return jjMoveStringLiteralDfa3_0(active0, 0x600040000000L, active1, 0xe0000000000000L, active2, 0x100000000L);
            case 74:
            case 106:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000L, active2, 0L);
            case 76:
            case 108:
                if ((active1 & 0x40000000L) != 0L) return jjStartNfaWithStates_0(2, 94, 23);
                else if ((active1 & 0x400000000L) != 0L) {
                    jjmatchedKind = 98;
                    jjmatchedPos = 2;
                } else if ((active1 & 0x1000000000000L) != 0L) return jjStartNfaWithStates_0(2, 112, 23);
                return jjMoveStringLiteralDfa3_0(active0, 0x801800400000000L, active1, 0x1800000000L, active2, 0L);
            case 77:
            case 109:
                if ((active1 & 0x80L) != 0L) return jjStartNfaWithStates_0(2, 71, 23);
                else if ((active1 & 0x20000000L) != 0L) return jjStartNfaWithStates_0(2, 93, 23);
                else if ((active2 & 0x20L) != 0L) return jjStartNfaWithStates_0(2, 133, 23);
                return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L, active1, 0x800000200000L, active2, 0L);
            case 78:
            case 110:
                if ((active1 & 0x2L) != 0L) return jjStartNfaWithStates_0(2, 65, 23);
                else if ((active1 & 0x4000000000000000L) != 0L) return jjStartNfaWithStates_0(2, 126, 23);
                return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0L, active2, 0x20000000L);
            case 79:
            case 111:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x80000000L);
            case 80:
            case 112:
                if ((active1 & 0x1000000L) != 0L) return jjStartNfaWithStates_0(2, 88, 23);
                else if ((active1 & 0x4000000000L) != 0L) return jjStartNfaWithStates_0(2, 102, 23);
                else if ((active1 & 0x40000000000L) != 0L) return jjStartNfaWithStates_0(2, 106, 23);
                return jjMoveStringLiteralDfa3_0(active0, 0x8000004000000L, active1, 0x8000L, active2, 0L);
            case 81:
            case 113:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x200000L);
            case 82:
            case 114:
                if ((active0 & 0x200000000L) != 0L) return jjStartNfaWithStates_0(2, 33, 23);
                else if ((active0 & 0x2000000000000000L) != 0L) return jjStartNfaWithStates_0(2, 61, 23);
                else if ((active1 & 0x4L) != 0L) return jjStartNfaWithStates_0(2, 66, 23);
                else if ((active1 & 0x10000L) != 0L) return jjStartNfaWithStates_0(2, 80, 23);
                else if ((active1 & 0x80000000L) != 0L) return jjStartNfaWithStates_0(2, 95, 23);
                else if ((active1 & 0x2000000000000L) != 0L) return jjStartNfaWithStates_0(2, 113, 23);
                else if ((active1 & 0x100000000000000L) != 0L) {
                    jjmatchedKind = 120;
                    jjmatchedPos = 2;
                } else if ((active1 & 0x8000000000000000L) != 0L) return jjStartNfaWithStates_0(2, 127, 23);
                else if ((active2 & 0x2000L) != 0L) return jjStartNfaWithStates_0(2, 141, 23);
                return jjMoveStringLiteralDfa3_0(active0, 0x1800000L, active1, 0x600000000000000L, active2, 0x800000L);
            case 83:
            case 115:
                if ((active1 & 0x8L) != 0L) return jjStartNfaWithStates_0(2, 67, 23);
                else if ((active1 & 0x10000000L) != 0L) return jjStartNfaWithStates_0(2, 92, 23);
                else if ((active2 & 0x1L) != 0L) return jjStartNfaWithStates_0(2, 128, 23);
                else if ((active2 & 0x100L) != 0L) return jjStartNfaWithStates_0(2, 136, 23);
                return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0x80000000800L, active2, 0xe00000000L);
            case 84:
            case 116:
                if ((active0 & 0x400000000000000L) != 0L) return jjStartNfaWithStates_0(2, 58, 23);
                else if ((active1 & 0x10L) != 0L) return jjStartNfaWithStates_0(2, 68, 23);
                else if ((active1 & 0x20000000000L) != 0L) return jjStartNfaWithStates_0(2, 105, 23);
                else if ((active1 & 0x200000000000L) != 0L) {
                    jjmatchedKind = 109;
                    jjmatchedPos = 2;
                } else if ((active2 & 0x2L) != 0L) return jjStartNfaWithStates_0(2, 129, 23);
                else if ((active2 & 0x1000L) != 0L) return jjStartNfaWithStates_0(2, 140, 23);
                return jjMoveStringLiteralDfa3_0(active0, 0x60000000700000L, active1, 0x400000000000L, active2, 0L);
            case 85:
            case 117:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xe0000L, active2, 0L);
            case 86:
            case 118:
                if ((active1 & 0x20L) != 0L) return jjStartNfaWithStates_0(2, 69, 23);
                else if ((active1 & 0x100000000L) != 0L) {
                    jjmatchedKind = 96;
                    jjmatchedPos = 2;
                } else if ((active2 & 0x4L) != 0L) return jjStartNfaWithStates_0(2, 130, 23);
                return jjMoveStringLiteralDfa3_0(active0, 0x180000000000000L, active1, 0x200000000L, active2, 0L);
            case 87:
            case 119:
                if ((active0 & 0x10000L) != 0L) return jjStartNfaWithStates_0(2, 16, 23);
                else if ((active2 & 0x4000000L) != 0L) return jjStopAtPos(2, 154);
                break;
            case 88:
            case 120:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x40000000L);
            case 89:
            case 121:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x1000000L);
            case 90:
            case 122:
                if ((active1 & 0x40L) != 0L) return jjStartNfaWithStates_0(2, 70, 23);
                else if ((active2 & 0x8L) != 0L) return jjStartNfaWithStates_0(2, 131, 23);
                break;
            default :
                break;
        }
        return jjStartNfa_0(1, active0, active1, active2);
    }

    private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
            return jjStartNfa_0(1, old0, old1, old2);
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(2, active0, active1, active2);
            return 3;
        }
        switch (curChar) {
            case 50:
                if ((active0 & 0x4000000L) != 0L) return jjStartNfaWithStates_0(3, 26, 23);
                else if ((active0 & 0x8000000L) != 0L) return jjStartNfaWithStates_0(3, 27, 23);
                break;
            case 65:
            case 97:
                return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L, active1, 0x2000L, active2, 0L);
            case 67:
            case 99:
                if ((active0 & 0x1000000000L) != 0L) return jjStartNfaWithStates_0(3, 36, 23);
                else if ((active0 & 0x4000000000L) != 0L) return jjStartNfaWithStates_0(3, 38, 23);
                else if ((active0 & 0x80000000000L) != 0L) return jjStartNfaWithStates_0(3, 43, 23);
                else if ((active0 & 0x20000000000000L) != 0L) return jjStartNfaWithStates_0(3, 53, 23);
                else if ((active0 & 0x80000000000000L) != 0L) return jjStartNfaWithStates_0(3, 55, 23);
                else if ((active1 & 0x20000000000000L) != 0L) return jjStartNfaWithStates_0(3, 117, 23);
                else if ((active1 & 0x200000000000000L) != 0L) return jjStartNfaWithStates_0(3, 121, 23);
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x20000000L);
            case 68:
            case 100:
                if ((active0 & 0x800000L) != 0L) return jjStartNfaWithStates_0(3, 23, 23);
                else if ((active0 & 0x1000000L) != 0L) return jjStartNfaWithStates_0(3, 24, 23);
                else if ((active0 & 0x200000000000L) != 0L) return jjStartNfaWithStates_0(3, 45, 23);
                break;
            case 69:
            case 101:
                if ((active0 & 0x2000000L) != 0L) return jjStartNfaWithStates_0(3, 25, 23);
                else if ((active0 & 0x40000000000L) != 0L) return jjStartNfaWithStates_0(3, 42, 23);
                else if ((active0 & 0x400000000000L) != 0L) return jjStartNfaWithStates_0(3, 46, 23);
                else if ((active0 & 0x4000000000000L) != 0L) return jjStartNfaWithStates_0(3, 50, 23);
                else if ((active1 & 0x800L) != 0L) return jjStartNfaWithStates_0(3, 75, 23);
                return jjMoveStringLiteralDfa4_0(active0, 0x700000L, active1, 0L, active2, 0xe00000010L);
            case 70:
            case 102:
                if ((active2 & 0x10000000L) != 0L) return jjStopAtPos(3, 156);
                break;
            case 71:
            case 103:
                if ((active2 & 0x800000L) != 0L) return jjStopAtPos(3, 151);
                break;
            case 72:
            case 104:
                if ((active0 & 0x20000L) != 0L) return jjStartNfaWithStates_0(3, 17, 23);
                else if ((active0 & 0x10000000000000L) != 0L) return jjStartNfaWithStates_0(3, 52, 23);
                else if ((active1 & 0x80000000000L) != 0L) return jjStartNfaWithStates_0(3, 107, 23);
                break;
            case 73:
            case 105:
                if ((active0 & 0x100000000L) != 0L) return jjStartNfaWithStates_0(3, 32, 23);
                else if ((active0 & 0x2000000000000L) != 0L) return jjStartNfaWithStates_0(3, 49, 23);
                else if ((active1 & 0x400000000000L) != 0L) return jjStartNfaWithStates_0(3, 110, 23);
                else if ((active1 & 0x8000000000000L) != 0L) return jjStartNfaWithStates_0(3, 115, 23);
                else if ((active2 & 0x400L) != 0L) return jjStartNfaWithStates_0(3, 138, 23);
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x40000000L);
            case 76:
            case 108:
                if ((active0 & 0x8000000000000L) != 0L) return jjStartNfaWithStates_0(3, 51, 23);
                else if ((active0 & 0x800000000000000L) != 0L) return jjStartNfaWithStates_0(3, 59, 23);
                else if ((active1 & 0x20000L) != 0L) {
                    jjmatchedKind = 81;
                    jjmatchedPos = 3;
                }
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000001c0000L, active2, 0x80000000L);
            case 77:
            case 109:
                if ((active1 & 0x8000L) != 0L) return jjStartNfaWithStates_0(3, 79, 23);
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000L, active2, 0L);
            case 79:
            case 111:
                if ((active0 & 0x800000000000L) != 0L) return jjStartNfaWithStates_0(3, 47, 23);
                break;
            case 80:
            case 112:
                if ((active1 & 0x200000L) != 0L) return jjStartNfaWithStates_0(3, 85, 23);
                else if ((active1 & 0x800000000000L) != 0L) return jjStartNfaWithStates_0(3, 111, 23);
                else if ((active2 & 0x800L) != 0L) return jjStartNfaWithStates_0(3, 139, 23);
                break;
            case 81:
            case 113:
                if ((active0 & 0x20000000000L) != 0L) return jjStartNfaWithStates_0(3, 41, 23);
                break;
            case 82:
            case 114:
                if ((active0 & 0x400000000L) != 0L) return jjStartNfaWithStates_0(3, 34, 23);
                break;
            case 83:
            case 115:
                if ((active0 & 0x2000000000L) != 0L) return jjStartNfaWithStates_0(3, 37, 23);
                else if ((active0 & 0x8000000000L) != 0L) return jjStartNfaWithStates_0(3, 39, 23);
                else if ((active0 & 0x100000000000L) != 0L) return jjStartNfaWithStates_0(3, 44, 23);
                else if ((active0 & 0x40000000000000L) != 0L) return jjStartNfaWithStates_0(3, 54, 23);
                else if ((active0 & 0x100000000000000L) != 0L) return jjStartNfaWithStates_0(3, 56, 23);
                else if ((active1 & 0x800000000L) != 0L) {
                    jjmatchedKind = 99;
                    jjmatchedPos = 3;
                } else if ((active1 & 0x40000000000000L) != 0L) return jjStartNfaWithStates_0(3, 118, 23);
                else if ((active1 & 0x400000000000000L) != 0L) return jjStartNfaWithStates_0(3, 122, 23);
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000000L, active2, 0x100000000L);
            case 84:
            case 116:
                if ((active0 & 0x1000000000000L) != 0L) return jjStartNfaWithStates_0(3, 48, 23);
                else if ((active0 & 0x200000000000000L) != 0L) return jjStartNfaWithStates_0(3, 57, 23);
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x1000000L);
            case 85:
            case 117:
                if ((active2 & 0x200000L) != 0L) return jjStopAtPos(3, 149);
                break;
            case 87:
            case 119:
                if ((active0 & 0x40000000L) != 0L) return jjStartNfaWithStates_0(3, 30, 23);
                else if ((active1 & 0x200000000L) != 0L) return jjStartNfaWithStates_0(3, 97, 23);
                else if ((active1 & 0x80000000000000L) != 0L) return jjStartNfaWithStates_0(3, 119, 23);
                break;
            default :
                break;
        }
        return jjStartNfa_0(2, active0, active1, active2);
    }

    private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
            return jjStartNfa_0(2, old0, old1, old2);
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(3, active0, active1, active2);
            return 4;
        }
        switch (curChar) {
            case 50:
                if ((active0 & 0x100000L) != 0L) return jjStartNfaWithStates_0(4, 20, 23);
                break;
            case 51:
                if ((active0 & 0x200000L) != 0L) return jjStartNfaWithStates_0(4, 21, 23);
                break;
            case 52:
                if ((active0 & 0x400000L) != 0L) return jjStartNfaWithStates_0(4, 22, 23);
                break;
            case 69:
            case 101:
                if ((active2 & 0x1000000L) != 0L) return jjStopAtPos(4, 152);
                break;
            case 71:
            case 103:
                if ((active2 & 0x200000000L) != 0L) return jjStopAtPos(4, 161);
                else if ((active2 & 0x400000000L) != 0L) return jjStopAtPos(4, 162);
                else if ((active2 & 0x800000000L) != 0L) return jjStopAtPos(4, 163);
                break;
            case 73:
            case 105:
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x80000000L);
            case 75:
            case 107:
                if ((active0 & 0x10000000000L) != 0L) return jjStartNfaWithStates_0(4, 40, 23);
                break;
            case 76:
            case 108:
                if ((active1 & 0x100000L) != 0L) return jjStartNfaWithStates_0(4, 84, 23);
                else if ((active1 & 0x100000000000L) != 0L) return jjStartNfaWithStates_0(4, 108, 23);
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000L, active2, 0x20000000L);
            case 80:
            case 112:
                if ((active1 & 0x4000L) != 0L) return jjStartNfaWithStates_0(4, 78, 23);
                else if ((active2 & 0x10L) != 0L) return jjStartNfaWithStates_0(4, 132, 23);
                break;
            case 83:
            case 115:
                if ((active1 & 0x40000L) != 0L) {
                    jjmatchedKind = 82;
                    jjmatchedPos = 4;
                }
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000L, active2, 0L);
            case 84:
            case 116:
                if ((active2 & 0x40000000L) != 0L) return jjStopAtPos(4, 158);
                else if ((active2 & 0x100000000L) != 0L) return jjStopAtPos(4, 160);
                break;
            case 85:
            case 117:
                if ((active1 & 0x1000000000L) != 0L) return jjStartNfaWithStates_0(4, 100, 23);
                break;
            default :
                break;
        }
        return jjStartNfa_0(3, active0, active1, active2);
    }

    private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2) {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
            return jjStartNfa_0(3, old0, old1, old2);
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(4, 0L, active1, active2);
            return 5;
        }
        switch (curChar) {
            case 76:
            case 108:
                if ((active1 & 0x2000L) != 0L) return jjStartNfaWithStates_0(5, 77, 23);
                break;
            case 83:
            case 115:
                return jjMoveStringLiteralDfa6_0(active1, 0L, active2, 0x80000000L);
            case 85:
            case 117:
                if ((active1 & 0x80000L) != 0L) return jjStartNfaWithStates_0(5, 83, 23);
                return jjMoveStringLiteralDfa6_0(active1, 0L, active2, 0x20000000L);
            default :
                break;
        }
        return jjStartNfa_0(4, 0L, active1, active2);
    }

    private int jjMoveStringLiteralDfa6_0(long old1, long active1, long old2, long active2) {
        if (((active1 &= old1) | (active2 &= old2)) == 0L) return jjStartNfa_0(4, 0L, old1, old2);
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(5, 0L, 0L, active2);
            return 6;
        }
        switch (curChar) {
            case 68:
            case 100:
                return jjMoveStringLiteralDfa7_0(active2, 0x20000000L);
            case 84:
            case 116:
                if ((active2 & 0x80000000L) != 0L) return jjStopAtPos(6, 159);
                break;
            default :
                break;
        }
        return jjStartNfa_0(5, 0L, 0L, active2);
    }

    private int jjMoveStringLiteralDfa7_0(long old2, long active2) {
        if ((active2 &= old2) == 0L) return jjStartNfa_0(5, 0L, 0L, old2);
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(6, 0L, 0L, active2);
            return 7;
        }
        switch (curChar) {
            case 69:
            case 101:
                if ((active2 & 0x20000000L) != 0L) return jjStopAtPos(7, 157);
                break;
            default :
                break;
        }
        return jjStartNfa_0(6, 0L, 0L, active2);
    }

    private void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    private void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    private void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

    static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };

    private int jjMoveNfa_0(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 29;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        while (true) {
            if (++jjround == 0x7fffffff) ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0x3fe000000000000L & l) != 0L) {
                                if (kind > 9) kind = 9;
                                jjCheckNAdd(1);
                            } else if (curChar == 48) {
                                if (kind > 9) kind = 9;
                                jjCheckNAddStates(0, 2);
                            } else if (curChar == 34) jjCheckNAddStates(3, 5);
                            else if (curChar == 39) jjAddStates(6, 7);
                            else if (curChar == 36) jjCheckNAdd(3);
                            break;
                        case 1:
                            if ((0x3ff000000000000L & l) == 0L) break;
                            if (kind > 9) kind = 9;
                            jjCheckNAdd(1);
                            break;
                        case 2:
                            if (curChar == 36) jjCheckNAdd(3);
                            break;
                        case 3:
                            if ((0x3ff000000000000L & l) == 0L) break;
                            if (kind > 9) kind = 9;
                            jjCheckNAdd(3);
                            break;
                        case 4:
                            if (curChar == 39) jjAddStates(6, 7);
                            break;
                        case 5:
                            if ((0xffffff7fffffdbffL & l) != 0L) jjCheckNAdd(6);
                            break;
                        case 6:
                            if (curChar == 39 && kind > 14) kind = 14;
                            break;
                        case 8:
                            if ((0x8400000000L & l) != 0L) jjCheckNAdd(6);
                            break;
                        case 9:
                            if ((0xff000000000000L & l) != 0L) jjCheckNAddTwoStates(10, 6);
                            break;
                        case 10:
                            if ((0xff000000000000L & l) != 0L) jjCheckNAdd(6);
                            break;
                        case 11:
                            if ((0xf000000000000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 12;
                            break;
                        case 12:
                            if ((0xff000000000000L & l) != 0L) jjCheckNAdd(10);
                            break;
                        case 13:
                            if (curChar == 34) jjCheckNAddStates(3, 5);
                            break;
                        case 14:
                            if ((0xfffffffbffffdbffL & l) != 0L) jjCheckNAddStates(3, 5);
                            break;
                        case 16:
                            if ((0x8400000000L & l) != 0L) jjCheckNAddStates(3, 5);
                            break;
                        case 17:
                            if (curChar == 34 && kind > 15) kind = 15;
                            break;
                        case 18:
                            if ((0xff000000000000L & l) != 0L) jjCheckNAddStates(8, 11);
                            break;
                        case 19:
                            if ((0xff000000000000L & l) != 0L) jjCheckNAddStates(3, 5);
                            break;
                        case 20:
                            if ((0xf000000000000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 21;
                            break;
                        case 21:
                            if ((0xff000000000000L & l) != 0L) jjCheckNAdd(19);
                            break;
                        case 23:
                            if ((0x3ff000000000000L & l) == 0L) break;
                            if (kind > 142) kind = 142;
                            jjstateSet[jjnewStateCnt++] = 23;
                            break;
                        case 24:
                            if (curChar != 48) break;
                            if (kind > 9) kind = 9;
                            jjCheckNAddStates(0, 2);
                            break;
                        case 27:
                            if ((0x3000000000000L & l) == 0L) break;
                            if (kind > 9) kind = 9;
                            jjstateSet[jjnewStateCnt++] = 27;
                            break;
                        case 28:
                            if ((0xff000000000000L & l) == 0L) break;
                            if (kind > 9) kind = 9;
                            jjCheckNAdd(28);
                            break;
                        default :
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                        case 23:
                            if ((0x7fffffe87fffffeL & l) == 0L) break;
                            if (kind > 142) kind = 142;
                            jjCheckNAdd(23);
                            break;
                        case 3:
                            if ((0x7e0000007eL & l) == 0L) break;
                            if (kind > 9) kind = 9;
                            jjCheckNAdd(3);
                            break;
                        case 5:
                            if ((0xffffffffefffffffL & l) != 0L) jjCheckNAdd(6);
                            break;
                        case 7:
                            if (curChar == 92) jjAddStates(12, 14);
                            break;
                        case 8:
                            if ((0x14404410144044L & l) != 0L) jjCheckNAdd(6);
                            break;
                        case 14:
                            if ((0xffffffffefffffffL & l) != 0L) jjCheckNAddStates(3, 5);
                            break;
                        case 15:
                            if (curChar == 92) jjAddStates(15, 17);
                            break;
                        case 16:
                            if ((0x14404410144044L & l) != 0L) jjCheckNAddStates(3, 5);
                            break;
                        case 25:
                            if ((0x100000001000000L & l) != 0L) jjCheckNAdd(3);
                            break;
                        case 26:
                            if ((0x400000004L & l) != 0L) jjstateSet[jjnewStateCnt++] = 27;
                            break;
                        default :
                            break;
                    }
                } while (i != startsAt);
            } else {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 5:
                            if ((jjbitVec0[i2] & l2) != 0L) jjstateSet[jjnewStateCnt++] = 6;
                            break;
                        case 14:
                            if ((jjbitVec0[i2] & l2) != 0L) jjAddStates(3, 5);
                            break;
                        default :
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 29 - (jjnewStateCnt = startsAt))) return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (IOException e) {
                return curPos;
            }
        }
    }

    private int jjMoveStringLiteralDfa0_1() {
        return jjMoveNfa_1(0, 0);
    }

    private int jjMoveNfa_1(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 3;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        while (true) {
            if (++jjround == 0x7fffffff) ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0x2400L & l) != 0L) {
                                if (kind > 7) kind = 7;
                            }
                            if (curChar == 13) jjstateSet[jjnewStateCnt++] = 1;
                            break;
                        case 1:
                            if (curChar == 10 && kind > 7) kind = 7;
                            break;
                        case 2:
                            if (curChar == 13) jjstateSet[jjnewStateCnt++] = 1;
                            break;
                        default :
                            break;
                    }
                } while (i != startsAt);
            } else do {
                switch (jjstateSet[--i]) {
                    default :
                        break;
                }
            } while (i != startsAt);
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt))) return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (IOException e) {
                return curPos;
            }
        }
    }

    static final int[] jjnextStates = { 25, 26, 28, 14, 15, 17, 5, 7, 14, 15, 19, 17, 8, 9, 11, 16, 18, 20, };
    public static final String[] jjstrLiteralImages = { "", null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, "\54", "\53", "\55", "\72", null, "\75", null,
            null, null, null, null, null, null, null, null, null, null, null, null, "\174\174", "\46\46",
            "\174", "\136", "\46", "\75\75", "\41\75", "\76", "\76\75", "\74", "\74\75", "\74\74", "\76\76",
            "\52", "\57", "\41", "\176", "\50", "\51", };
    public static final int[] jjnewLexState = { -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, };
    static final long[] jjtoToken = { 0xffffffffffffc201L, 0xffffffffffffffffL, 0x7ffffffffe7fffL, };
    static final long[] jjtoSkip = { 0xbeL, 0x0L, 0x0L, };
    static final long[] jjtoSpecial = { 0x80L, 0x0L, 0x0L, };
    protected SimpleCharStream input_stream;
    private final int[] jjrounds = new int[29];
    private final int[] jjstateSet = new int[58];
    int jjimageLen;
    protected char curChar;

    public AtmelParserTokenManager(SimpleCharStream stream) {
        input_stream = stream;
    }

    public AtmelParserTokenManager(SimpleCharStream stream, int lexState) {
        this(stream);
        SwitchTo(lexState);
    }

    private void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 29; i-- > 0;)
            jjrounds[i] = 0x80000000;
    }

    public void SwitchTo(int lexState) {
        if (lexState >= 2 || lexState < 0)
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". LegacyState unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
        else curLexState = lexState;
    }

    protected Token jjFillToken() {
        Token t = Token.newToken(jjmatchedKind);
        t.kind = jjmatchedKind;
        String im = jjstrLiteralImages[jjmatchedKind];
        t.image = im == null ? input_stream.GetImage() : im;
        t.beginLine = input_stream.getBeginLine();
        t.beginColumn = input_stream.getBeginColumn();
        t.endLine = input_stream.getEndLine();
        t.endColumn = input_stream.getEndColumn();
        return t;
    }

    int curLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    public Token getNextToken() {
        Token specialToken = null;
        Token matchedToken;
        int curPos = 0;

        EOFLoop :
        while (true) {
            try {
                curChar = input_stream.BeginToken();
            } catch (IOException e) {
                jjmatchedKind = 0;
                matchedToken = jjFillToken();
                return matchedToken;
            }
            jjimageLen = 0;

            while (true) {
                switch (curLexState) {
                    case 0:
                        try {
                            input_stream.backup(0);
                            while (curChar <= 32 && (0x100003600L & 1L << curChar) != 0L)
                                curChar = input_stream.BeginToken();
                        } catch (IOException e1) {
                            continue EOFLoop;
                        }
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_0();
                        break;
                    case 1:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_1();
                        if (jjmatchedPos == 0 && jjmatchedKind > 8) {
                            jjmatchedKind = 8;
                        }
                        break;
                }
                if (jjmatchedKind != 0x7fffffff) {
                    if (jjmatchedPos + 1 < curPos) input_stream.backup(curPos - jjmatchedPos - 1);
                    if ((jjtoToken[jjmatchedKind >> 6] & 1L << (jjmatchedKind & 077)) != 0L) {
                        matchedToken = jjFillToken();
                        if (jjnewLexState[jjmatchedKind] != -1) curLexState = jjnewLexState[jjmatchedKind];
                        return matchedToken;
                    } else if ((jjtoSkip[jjmatchedKind >> 6] & 1L << (jjmatchedKind & 077)) != 0L) {
                        if ((jjtoSpecial[jjmatchedKind >> 6] & 1L << (jjmatchedKind & 077)) == 0L)
                            SkipLexicalActions(null);
                        else {
                            matchedToken = jjFillToken();
                            if (specialToken == null) specialToken = matchedToken;
                            else {
                                specialToken = specialToken.next = matchedToken;
                            }
                            SkipLexicalActions(matchedToken);
                        }
                        if (jjnewLexState[jjmatchedKind] != -1) curLexState = jjnewLexState[jjmatchedKind];
                        continue EOFLoop;
                    }
                    jjimageLen += jjmatchedPos + 1;
                    if (jjnewLexState[jjmatchedKind] != -1) curLexState = jjnewLexState[jjmatchedKind];
                    curPos = 0;
                    jjmatchedKind = 0x7fffffff;
                    try {
                        curChar = input_stream.readChar();
                        continue;
                    } catch (IOException e1) {
                    }
                }
                int error_line = input_stream.getEndLine();
                int error_column = input_stream.getEndColumn();
                String error_after = null;
                boolean EOFSeen = false;
                try {
                    input_stream.readChar();
                    input_stream.backup(1);
                } catch (IOException e1) {
                    EOFSeen = true;
                    error_after = curPos <= 1 ? "" : input_stream.GetImage();
                    if (curChar == '\n' || curChar == '\r') {
                        error_line++;
                        error_column = 0;
                    } else error_column++;
                }
                if (!EOFSeen) {
                    input_stream.backup(1);
                    error_after = curPos <= 1 ? "" : input_stream.GetImage();
                }
                throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
            }
        }
    }

    void SkipLexicalActions(Token matchedToken) {
        switch (jjmatchedKind) {
            default :
                break;
        }
    }
}
