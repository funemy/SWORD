/* Generated By:JavaCC: Do not edit this line. ISDLParserTokenManager.java */
package jintgen.isdl.parser;

import java.io.IOException;
import java.io.PrintStream;

public class ISDLParserTokenManager implements ISDLParserConstants {

    public PrintStream debugStream = System.out;

    public void setDebugStream(PrintStream ds) {
        debugStream = ds;
    }

    private int jjStopStringLiteralDfa_0(int pos, long active0, long active1) {
        switch (pos) {
            case 0:
                if ((active0 & 0x200000L) != 0L) {
                    jjmatchedKind = 75;
                    return 22;
                }
                if ((active0 & 0x2000000000000140L) != 0L) return 2;
                if ((active0 & 0x1dfffffd80000L) != 0L || (active1 & 0x20000L) != 0L) {
                    jjmatchedKind = 75;
                    return 25;
                }
                if ((active0 & 0x800000000000000L) != 0L) return 5;
                return -1;
            case 1:
                if ((active0 & 0x100L) != 0L) return 0;
                if ((active0 & 0x9000000000L) != 0L) return 25;
                if ((active0 & 0x1df6ffff80000L) != 0L || (active1 & 0x20000L) != 0L) {
                    jjmatchedKind = 75;
                    jjmatchedPos = 1;
                    return 25;
                }
                return -1;
            case 2:
                if ((active0 & 0x1de2ffff80000L) != 0L || (active1 & 0x20000L) != 0L) {
                    jjmatchedKind = 75;
                    jjmatchedPos = 2;
                    return 25;
                }
                if ((active0 & 0x14000000000L) != 0L) return 25;
                return -1;
            case 3:
                if ((active0 & 0x15e0ff7380000L) != 0L) {
                    if (jjmatchedPos != 3) {
                        jjmatchedKind = 75;
                        jjmatchedPos = 3;
                    }
                    return 25;
                }
                if ((active1 & 0x20000L) != 0L) {
                    if (jjmatchedPos < 2) {
                        jjmatchedKind = 75;
                        jjmatchedPos = 2;
                    }
                    return -1;
                }
                if ((active0 & 0x802008c00000L) != 0L) return 25;
                return -1;
            case 4:
                if ((active1 & 0x20000L) != 0L) {
                    if (jjmatchedPos < 2) {
                        jjmatchedKind = 75;
                        jjmatchedPos = 2;
                    }
                    return -1;
                }
                if ((active0 & 0x230000000L) != 0L) return 25;
                if ((active0 & 0x6000000L) != 0L) {
                    if (jjmatchedPos < 3) {
                        jjmatchedKind = 75;
                        jjmatchedPos = 3;
                    }
                    return -1;
                }
                if ((active0 & 0x15e0dc1380000L) != 0L) {
                    jjmatchedKind = 75;
                    jjmatchedPos = 4;
                    return 25;
                }
                return -1;
            case 5:
                if ((active0 & 0x10a01c1180000L) != 0L) {
                    jjmatchedKind = 75;
                    jjmatchedPos = 5;
                    return 25;
                }
                if ((active1 & 0x20000L) != 0L) {
                    if (jjmatchedPos < 2) {
                        jjmatchedKind = 75;
                        jjmatchedPos = 2;
                    }
                    return -1;
                }
                if ((active0 & 0x6000000L) != 0L) {
                    if (jjmatchedPos < 3) {
                        jjmatchedKind = 75;
                        jjmatchedPos = 3;
                    }
                    return -1;
                }
                if ((active0 & 0x540c00200000L) != 0L) return 25;
                return -1;
            case 6:
                if ((active0 & 0x10a00c1180000L) != 0L) {
                    jjmatchedKind = 75;
                    jjmatchedPos = 6;
                    return 25;
                }
                if ((active1 & 0x20000L) != 0L) {
                    if (jjmatchedPos < 2) {
                        jjmatchedKind = 75;
                        jjmatchedPos = 2;
                    }
                    return -1;
                }
                if ((active0 & 0x100000000L) != 0L) return 25;
                if ((active0 & 0x6000000L) != 0L) {
                    if (jjmatchedPos < 3) {
                        jjmatchedKind = 75;
                        jjmatchedPos = 3;
                    }
                    return -1;
                }
                return -1;
            case 7:
                if ((active0 & 0x1000000L) != 0L) {
                    if (jjmatchedPos < 6) {
                        jjmatchedKind = 75;
                        jjmatchedPos = 6;
                    }
                    return -1;
                }
                if ((active0 & 0x20000180000L) != 0L) {
                    jjmatchedKind = 75;
                    jjmatchedPos = 7;
                    return 25;
                }
                if ((active1 & 0x20000L) != 0L) {
                    if (jjmatchedPos < 2) {
                        jjmatchedKind = 75;
                        jjmatchedPos = 2;
                    }
                    return -1;
                }
                if ((active0 & 0x10800c0000000L) != 0L) return 25;
                if ((active0 & 0x6000000L) != 0L) {
                    if (jjmatchedPos < 3) {
                        jjmatchedKind = 75;
                        jjmatchedPos = 3;
                    }
                    return -1;
                }
                return -1;
            case 8:
                if ((active0 & 0x1000000L) != 0L) {
                    if (jjmatchedPos < 6) {
                        jjmatchedKind = 75;
                        jjmatchedPos = 6;
                    }
                    return -1;
                }
                if ((active1 & 0x20000L) != 0L) {
                    if (jjmatchedPos < 2) {
                        jjmatchedKind = 75;
                        jjmatchedPos = 2;
                    }
                    return -1;
                }
                if ((active0 & 0x2000000L) != 0L) {
                    if (jjmatchedPos < 3) {
                        jjmatchedKind = 75;
                        jjmatchedPos = 3;
                    }
                    return -1;
                }
                if ((active0 & 0x20000180000L) != 0L) {
                    jjmatchedKind = 75;
                    jjmatchedPos = 8;
                    return 25;
                }
                return -1;
            case 9:
                if ((active0 & 0x180000L) != 0L) {
                    jjmatchedKind = 75;
                    jjmatchedPos = 9;
                    return 25;
                }
                if ((active0 & 0x1000000L) != 0L) {
                    if (jjmatchedPos < 6) {
                        jjmatchedKind = 75;
                        jjmatchedPos = 6;
                    }
                    return -1;
                }
                if ((active1 & 0x20000L) != 0L) {
                    if (jjmatchedPos < 2) {
                        jjmatchedKind = 75;
                        jjmatchedPos = 2;
                    }
                    return -1;
                }
                if ((active0 & 0x20000000000L) != 0L) return 25;
                return -1;
            case 10:
                if ((active0 & 0x100000L) != 0L) {
                    jjmatchedKind = 75;
                    jjmatchedPos = 10;
                    return 25;
                }
                if ((active0 & 0x1000000L) != 0L) {
                    if (jjmatchedPos < 6) {
                        jjmatchedKind = 75;
                        jjmatchedPos = 6;
                    }
                    return -1;
                }
                if ((active1 & 0x20000L) != 0L) {
                    if (jjmatchedPos < 2) {
                        jjmatchedKind = 75;
                        jjmatchedPos = 2;
                    }
                    return -1;
                }
                if ((active0 & 0x80000L) != 0L) return 25;
                return -1;
            default :
                return -1;
        }
    }

    private int jjStartNfa_0(int pos, long active0, long active1) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
    }

    private int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    private int jjStartNfaWithStates_0(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }

    private int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
            case 33:
                jjmatchedKind = 66;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x20L);
            case 36:
                return jjStopAtPos(0, 74);
            case 37:
                return jjStopAtPos(0, 62);
            case 38:
                return jjStopAtPos(0, 63);
            case 40:
                return jjStopAtPos(0, 53);
            case 41:
                return jjStopAtPos(0, 54);
            case 42:
                return jjStopAtPos(0, 60);
            case 43:
                return jjStopAtPos(0, 58);
            case 44:
                return jjStopAtPos(0, 52);
            case 45:
                return jjStartNfaWithStates_0(0, 59, 5);
            case 46:
                return jjStopAtPos(0, 82);
            case 47:
                jjmatchedKind = 61;
                return jjMoveStringLiteralDfa1_0(0x140L, 0x0L);
            case 58:
                return jjStopAtPos(0, 78);
            case 59:
                return jjStopAtPos(0, 55);
            case 60:
                jjmatchedKind = 70;
                return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x80L);
            case 61:
                jjmatchedKind = 51;
                return jjMoveStringLiteralDfa1_0(0x0L, 0x10L);
            case 62:
                jjmatchedKind = 72;
                return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x200L);
            case 91:
                return jjStopAtPos(0, 79);
            case 93:
                return jjStopAtPos(0, 80);
            case 94:
                return jjStopAtPos(0, 65);
            case 97:
                return jjMoveStringLiteralDfa1_0(0x4006100000L, 0x0L);
            case 101:
                return jjMoveStringLiteralDfa1_0(0x82180c00000L, 0x0L);
            case 102:
                return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L);
            case 103:
                return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
            case 105:
                return jjMoveStringLiteralDfa1_0(0x41000080000L, 0x0L);
            case 108:
                return jjMoveStringLiteralDfa1_0(0x200000000L, 0x0L);
            case 109:
                return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L);
            case 111:
                return jjMoveStringLiteralDfa1_0(0x8001000000L, 0x0L);
            case 112:
                return jjMoveStringLiteralDfa1_0(0x1400040000000L, 0x0L);
            case 114:
                return jjMoveStringLiteralDfa1_0(0x100008000000L, 0x0L);
            case 115:
                return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x20000L);
            case 119:
                return jjMoveStringLiteralDfa1_0(0x800030000000L, 0x0L);
            case 120:
                return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L);
            case 123:
                return jjStopAtPos(0, 49);
            case 124:
                return jjStopAtPos(0, 64);
            case 125:
                return jjStopAtPos(0, 50);
            case 126:
                return jjStopAtPos(0, 67);
            default :
                return jjMoveNfa_0(3, 0);
        }
    }

    private int jjMoveStringLiteralDfa1_0(long active0, long active1) {
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(0, active0, active1);
            return 1;
        }
        switch (curChar) {
            case 42:
                if ((active0 & 0x100L) != 0L) return jjStartNfaWithStates_0(1, 8, 0);
                break;
            case 47:
                if ((active0 & 0x40L) != 0L) return jjStopAtPos(1, 6);
                break;
            case 60:
                if ((active0 & 0x100000000000000L) != 0L) return jjStopAtPos(1, 56);
                break;
            case 61:
                if ((active1 & 0x10L) != 0L) return jjStopAtPos(1, 68);
                else if ((active1 & 0x20L) != 0L) return jjStopAtPos(1, 69);
                else if ((active1 & 0x80L) != 0L) return jjStopAtPos(1, 71);
                else if ((active1 & 0x200L) != 0L) return jjStopAtPos(1, 73);
                break;
            case 62:
                if ((active0 & 0x200000000000000L) != 0L) return jjStopAtPos(1, 57);
                break;
            case 100:
                return jjMoveStringLiteralDfa2_0(active0, 0x6000000L, active1, 0L);
            case 101:
                return jjMoveStringLiteralDfa2_0(active0, 0x100808000000L, active1, 0L);
            case 102:
                if ((active0 & 0x1000000000L) != 0L) return jjStartNfaWithStates_0(1, 36, 25);
                break;
            case 104:
                return jjMoveStringLiteralDfa2_0(active0, 0x800020000000L, active1, 0L);
            case 108:
                return jjMoveStringLiteralDfa2_0(active0, 0x2400000000L, active1, 0L);
            case 110:
                return jjMoveStringLiteralDfa2_0(active0, 0x44080c80000L, active1, 0L);
            case 111:
                return jjMoveStringLiteralDfa2_0(active0, 0x10200200000L, active1, 0L);
            case 112:
                return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L);
            case 114:
                if ((active0 & 0x8000000000L) != 0L) return jjStartNfaWithStates_0(1, 39, 25);
                return jjMoveStringLiteralDfa2_0(active0, 0x1000050100000L, active1, 0L);
            case 115:
                return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0L);
            case 117:
                return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0x20000L);
            case 120:
                return jjMoveStringLiteralDfa2_0(active0, 0x80100000000L, active1, 0L);
            default :
                break;
        }
        return jjStartNfa_0(0, active0, active1);
    }

    private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L) return jjStartNfa_0(0, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(1, active0, active1);
            return 2;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa3_0(active0, 0x8000000L, active1, 0L);
            case 98:
                return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0x20000L);
            case 99:
                return jjMoveStringLiteralDfa3_0(active0, 0x280100000L, active1, 0L);
            case 100:
                if ((active0 & 0x4000000000L) != 0L) return jjStartNfaWithStates_0(2, 38, 25);
                return jjMoveStringLiteralDfa3_0(active0, 0x6000000L, active1, 0L);
            case 101:
                return jjMoveStringLiteralDfa3_0(active0, 0xc00121000000L, active1, 0L);
            case 105:
                return jjMoveStringLiteralDfa3_0(active0, 0x50000000L, active1, 0L);
            case 108:
                return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0L);
            case 109:
                return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0L);
            case 111:
                return jjMoveStringLiteralDfa3_0(active0, 0x1000400000000L, active1, 0L);
            case 114:
                if ((active0 & 0x10000000000L) != 0L) return jjStartNfaWithStates_0(2, 40, 25);
                return jjMoveStringLiteralDfa3_0(active0, 0x200000L, active1, 0L);
            case 115:
                return jjMoveStringLiteralDfa3_0(active0, 0x2000080000L, active1, 0L);
            case 116:
                return jjMoveStringLiteralDfa3_0(active0, 0x180000000000L, active1, 0L);
            case 117:
                return jjMoveStringLiteralDfa3_0(active0, 0xc00000L, active1, 0L);
            default :
                break;
        }
        return jjStartNfa_0(1, active0, active1);
    }

    private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L) return jjStartNfa_0(1, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(2, active0, active1);
            return 3;
        }
        switch (curChar) {
            case 45:
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000L);
            case 97:
                return jjMoveStringLiteralDfa4_0(active0, 0x200000000L, active1, 0L);
            case 98:
                return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0L);
            case 99:
                return jjMoveStringLiteralDfa4_0(active0, 0x100000000L, active1, 0L);
            case 100:
                if ((active0 & 0x8000000L) != 0L) return jjStartNfaWithStates_0(3, 27, 25);
                break;
            case 101:
                if ((active0 & 0x2000000000L) != 0L) return jjStartNfaWithStates_0(3, 37, 25);
                return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0L);
            case 104:
                return jjMoveStringLiteralDfa4_0(active0, 0x100000L, active1, 0L);
            case 105:
                return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0L);
            case 109:
                if ((active0 & 0x400000L) != 0L) {
                    jjmatchedKind = 22;
                    jjmatchedPos = 3;
                }
                return jjMoveStringLiteralDfa4_0(active0, 0xa00000L, active1, 0L);
            case 110:
                if ((active0 & 0x800000000000L) != 0L) return jjStartNfaWithStates_0(3, 47, 25);
                break;
            case 111:
                return jjMoveStringLiteralDfa4_0(active0, 0x8c0000000L, active1, 0L);
            case 112:
                return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0L);
            case 114:
                return jjMoveStringLiteralDfa4_0(active0, 0x20027000000L, active1, 0L);
            case 116:
                return jjMoveStringLiteralDfa4_0(active0, 0x10080000L, active1, 0L);
            case 117:
                return jjMoveStringLiteralDfa4_0(active0, 0x500000000000L, active1, 0L);
            default :
                break;
        }
        return jjStartNfa_0(2, active0, active1);
    }

    private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L) return jjStartNfa_0(2, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(3, active0, active1);
            return 4;
        }
        switch (curChar) {
            case 45:
                return jjMoveStringLiteralDfa5_0(active0, 0x6800000L, active1, 0L);
            case 97:
                return jjMoveStringLiteralDfa5_0(active0, 0x401200000L, active1, 0L);
            case 100:
                return jjMoveStringLiteralDfa5_0(active0, 0x400080000000L, active1, 0L);
            case 101:
                if ((active0 & 0x10000000L) != 0L) return jjStartNfaWithStates_0(4, 28, 25);
                else if ((active0 & 0x20000000L) != 0L) return jjStartNfaWithStates_0(4, 29, 25);
                return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000L, active1, 0L);
            case 105:
                return jjMoveStringLiteralDfa5_0(active0, 0x100000L, active1, 0L);
            case 108:
                if ((active0 & 0x200000000L) != 0L) return jjStartNfaWithStates_0(4, 33, 25);
                break;
            case 110:
                return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L, active1, 0L);
            case 111:
                return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L, active1, 0x20000L);
            case 114:
                return jjMoveStringLiteralDfa5_0(active0, 0x180840080000L, active1, 0L);
            case 117:
                return jjMoveStringLiteralDfa5_0(active0, 0x100000000L, active1, 0L);
            default :
                break;
        }
        return jjStartNfa_0(3, active0, active1);
    }

    private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L) return jjStartNfa_0(3, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(4, active0, active1);
            return 5;
        }
        switch (curChar) {
            case 101:
                if ((active0 & 0x40000000000L) != 0L) return jjStartNfaWithStates_0(5, 42, 25);
                break;
            case 105:
                return jjMoveStringLiteralDfa6_0(active0, 0xc0000000L, active1, 0L);
            case 108:
                if ((active0 & 0x400000000L) != 0L) return jjStartNfaWithStates_0(5, 34, 25);
                break;
            case 109:
                return jjMoveStringLiteralDfa6_0(active0, 0x2000000L, active1, 0L);
            case 110:
                if ((active0 & 0x100000000000L) != 0L) return jjStartNfaWithStates_0(5, 44, 25);
                return jjMoveStringLiteralDfa6_0(active0, 0x80001000000L, active1, 0L);
            case 111:
                if ((active0 & 0x400000000000L) != 0L) return jjStartNfaWithStates_0(5, 46, 25);
                break;
            case 112:
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000L);
            case 114:
                return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000L, active1, 0L);
            case 115:
                return jjMoveStringLiteralDfa6_0(active0, 0x4800000L, active1, 0L);
            case 116:
                if ((active0 & 0x200000L) != 0L) return jjStartNfaWithStates_0(5, 21, 25);
                return jjMoveStringLiteralDfa6_0(active0, 0x100100000L, active1, 0L);
            case 117:
                return jjMoveStringLiteralDfa6_0(active0, 0x20000080000L, active1, 0L);
            case 121:
                if ((active0 & 0x800000000L) != 0L) return jjStartNfaWithStates_0(5, 35, 25);
                break;
            default :
                break;
        }
        return jjStartNfa_0(4, active0, active1);
    }

    private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L) return jjStartNfa_0(4, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(5, active0, active1);
            return 6;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L, active1, 0L);
            case 99:
                return jjMoveStringLiteralDfa7_0(active0, 0x80000L, active1, 0L);
            case 100:
                return jjMoveStringLiteralDfa7_0(active0, 0x1000000L, active1, 0L);
            case 101:
                if ((active0 & 0x100000000L) != 0L) return jjStartNfaWithStates_0(6, 32, 25);
                return jjMoveStringLiteralDfa7_0(active0, 0x4100000L, active1, 0x20000L);
            case 110:
                return jjMoveStringLiteralDfa7_0(active0, 0x80000000L, active1, 0L);
            case 111:
                return jjMoveStringLiteralDfa7_0(active0, 0x2000000L, active1, 0L);
            case 116:
                return jjMoveStringLiteralDfa7_0(active0, 0x1020040000000L, active1, 0L);
            case 117:
                return jjMoveStringLiteralDfa7_0(active0, 0x800000L, active1, 0L);
            default :
                break;
        }
        return jjStartNfa_0(5, active0, active1);
    }

    private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L) return jjStartNfa_0(5, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(6, active0, active1);
            return 7;
        }
        switch (curChar) {
            case 45:
                return jjMoveStringLiteralDfa8_0(active0, 0x1000000L, active1, 0L);
            case 98:
                return jjMoveStringLiteralDfa8_0(active0, 0x800000L, active1, 0L);
            case 99:
                return jjMoveStringLiteralDfa8_0(active0, 0x100000L, active1, 0L);
            case 100:
                return jjMoveStringLiteralDfa8_0(active0, 0x2000000L, active1, 0L);
            case 103:
                if ((active0 & 0x80000000L) != 0L) return jjStartNfaWithStates_0(7, 31, 25);
                break;
            case 105:
                return jjMoveStringLiteralDfa8_0(active0, 0x20000000000L, active1, 0L);
            case 108:
                if ((active0 & 0x80000000000L) != 0L) return jjStartNfaWithStates_0(7, 43, 25);
                break;
            case 114:
                return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000L);
            case 116:
                if ((active0 & 0x4000000L) != 0L) return jjStopAtPos(7, 26);
                return jjMoveStringLiteralDfa8_0(active0, 0x80000L, active1, 0L);
            case 121:
                if ((active0 & 0x40000000L) != 0L) return jjStartNfaWithStates_0(7, 30, 25);
                else if ((active0 & 0x1000000000000L) != 0L) return jjStartNfaWithStates_0(7, 48, 25);
                break;
            default :
                break;
        }
        return jjStartNfa_0(6, active0, active1);
    }

    private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L) return jjStartNfa_0(6, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(7, active0, active1);
            return 8;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000L);
            case 101:
                if ((active0 & 0x2000000L) != 0L) return jjStopAtPos(8, 25);
                break;
            case 105:
                return jjMoveStringLiteralDfa9_0(active0, 0x80000L, active1, 0L);
            case 110:
                return jjMoveStringLiteralDfa9_0(active0, 0x20000000000L, active1, 0L);
            case 115:
                return jjMoveStringLiteralDfa9_0(active0, 0x800000L, active1, 0L);
            case 116:
                return jjMoveStringLiteralDfa9_0(active0, 0x1100000L, active1, 0L);
            default :
                break;
        }
        return jjStartNfa_0(7, active0, active1);
    }

    private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L) return jjStartNfa_0(7, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(8, active0, active1);
            return 9;
        }
        switch (curChar) {
            case 101:
                if ((active0 & 0x20000000000L) != 0L) return jjStartNfaWithStates_0(9, 41, 25);
                return jjMoveStringLiteralDfa10_0(active0, 0x800000L, active1, 0L);
            case 110:
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20000L);
            case 111:
                return jjMoveStringLiteralDfa10_0(active0, 0x80000L, active1, 0L);
            case 117:
                return jjMoveStringLiteralDfa10_0(active0, 0x100000L, active1, 0L);
            case 121:
                return jjMoveStringLiteralDfa10_0(active0, 0x1000000L, active1, 0L);
            default :
                break;
        }
        return jjStartNfa_0(8, active0, active1);
    }

    private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L) return jjStartNfa_0(8, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(9, active0, active1);
            return 10;
        }
        switch (curChar) {
            case 100:
                if ((active1 & 0x20000L) != 0L) return jjStopAtPos(10, 81);
                break;
            case 110:
                if ((active0 & 0x80000L) != 0L) return jjStartNfaWithStates_0(10, 19, 25);
                break;
            case 112:
                return jjMoveStringLiteralDfa11_0(active0, 0x1000000L, active1, 0L);
            case 114:
                return jjMoveStringLiteralDfa11_0(active0, 0x100000L, active1, 0L);
            case 116:
                if ((active0 & 0x800000L) != 0L) return jjStopAtPos(10, 23);
                break;
            default :
                break;
        }
        return jjStartNfa_0(9, active0, active1);
    }

    private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L) return jjStartNfa_0(9, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            jjStopStringLiteralDfa_0(10, active0, 0L);
            return 11;
        }
        switch (curChar) {
            case 101:
                if ((active0 & 0x100000L) != 0L) return jjStartNfaWithStates_0(11, 20, 25);
                else if ((active0 & 0x1000000L) != 0L) return jjStopAtPos(11, 24);
                break;
            default :
                break;
        }
        return jjStartNfa_0(10, active0, 0L);
    }

    private void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    private void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    private void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

    private void jjCheckNAddStates(int start) {
        jjCheckNAdd(jjnextStates[start]);
        jjCheckNAdd(jjnextStates[start + 1]);
    }

    static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };

    private int jjMoveNfa_0(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 32;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        while (true) {
            if (++jjround == 0x7fffffff) ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 22:
                        case 25:
                            if ((0x3ff000000000000L & l) == 0L) break;
                            if (kind > 75) kind = 75;
                            jjCheckNAdd(25);
                            break;
                        case 3:
                            if ((0x3fe000000000000L & l) != 0L) {
                                if (kind > 13) kind = 13;
                                jjCheckNAdd(6);
                            } else if (curChar == 48) {
                                if (kind > 13) kind = 13;
                                jjCheckNAddStates(0, 2);
                            } else if (curChar == 34) jjCheckNAddStates(3, 5);
                            else if (curChar == 45) jjstateSet[jjnewStateCnt++] = 5;
                            else if (curChar == 47) jjstateSet[jjnewStateCnt++] = 2;
                            break;
                        case 0:
                            if (curChar == 42) jjstateSet[jjnewStateCnt++] = 1;
                            break;
                        case 1:
                            if ((0xffff7fffffffffffL & l) != 0L && kind > 7) kind = 7;
                            break;
                        case 2:
                            if (curChar == 42) jjstateSet[jjnewStateCnt++] = 0;
                            break;
                        case 4:
                            if (curChar == 45) jjstateSet[jjnewStateCnt++] = 5;
                            break;
                        case 5:
                            if ((0x3fe000000000000L & l) == 0L) break;
                            if (kind > 13) kind = 13;
                            jjCheckNAdd(6);
                            break;
                        case 6:
                            if ((0x3ff000000000000L & l) == 0L) break;
                            if (kind > 13) kind = 13;
                            jjCheckNAdd(6);
                            break;
                        case 7:
                            if (curChar == 34) jjCheckNAddStates(3, 5);
                            break;
                        case 8:
                            if ((0xfffffffbffffdbffL & l) != 0L) jjCheckNAddStates(3, 5);
                            break;
                        case 10:
                            if ((0x8400000000L & l) != 0L) jjCheckNAddStates(3, 5);
                            break;
                        case 11:
                            if (curChar == 34 && kind > 18) kind = 18;
                            break;
                        case 12:
                            if ((0xff000000000000L & l) != 0L) jjCheckNAddStates(6, 9);
                            break;
                        case 13:
                            if ((0xff000000000000L & l) != 0L) jjCheckNAddStates(3, 5);
                            break;
                        case 14:
                            if ((0xf000000000000L & l) != 0L) jjstateSet[jjnewStateCnt++] = 15;
                            break;
                        case 15:
                            if ((0xff000000000000L & l) != 0L) jjCheckNAdd(13);
                            break;
                        case 26:
                            if (curChar != 48) break;
                            if (kind > 13) kind = 13;
                            jjCheckNAddStates(0, 2);
                            break;
                        case 28:
                            if ((0x3ff000000000000L & l) == 0L) break;
                            if (kind > 13) kind = 13;
                            jjstateSet[jjnewStateCnt++] = 28;
                            break;
                        case 30:
                            if ((0x3000000000000L & l) == 0L) break;
                            if (kind > 13) kind = 13;
                            jjstateSet[jjnewStateCnt++] = 30;
                            break;
                        case 31:
                            if ((0xff000000000000L & l) == 0L) break;
                            if (kind > 13) kind = 13;
                            jjCheckNAdd(31);
                            break;
                        default :
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 22:
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 75) kind = 75;
                                jjCheckNAdd(25);
                            }
                            if (curChar == 97) jjstateSet[jjnewStateCnt++] = 21;
                            break;
                        case 3:
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 75) kind = 75;
                                jjCheckNAdd(25);
                            }
                            if (curChar == 102) jjstateSet[jjnewStateCnt++] = 22;
                            else if (curChar == 116) jjstateSet[jjnewStateCnt++] = 18;
                            break;
                        case 1:
                            if (kind > 7) kind = 7;
                            break;
                        case 8:
                            if ((0xffffffffefffffffL & l) != 0L) jjCheckNAddStates(3, 5);
                            break;
                        case 9:
                            if (curChar == 92) jjAddStates(10, 12);
                            break;
                        case 10:
                            if ((0x14404410000000L & l) != 0L) jjCheckNAddStates(3, 5);
                            break;
                        case 16:
                            if (curChar == 101 && kind > 45) kind = 45;
                            break;
                        case 17:
                            if (curChar == 117) jjCheckNAdd(16);
                            break;
                        case 18:
                            if (curChar == 114) jjstateSet[jjnewStateCnt++] = 17;
                            break;
                        case 19:
                            if (curChar == 116) jjstateSet[jjnewStateCnt++] = 18;
                            break;
                        case 20:
                            if (curChar == 115) jjCheckNAdd(16);
                            break;
                        case 21:
                            if (curChar == 108) jjstateSet[jjnewStateCnt++] = 20;
                            break;
                        case 23:
                            if (curChar == 102) jjstateSet[jjnewStateCnt++] = 22;
                            break;
                        case 24:
                            if ((0x7fffffe87fffffeL & l) == 0L) break;
                            if (kind > 75) kind = 75;
                            jjCheckNAdd(25);
                            break;
                        case 25:
                            if ((0x7fffffe87fffffeL & l) == 0L) break;
                            if (kind > 75) kind = 75;
                            jjCheckNAdd(25);
                            break;
                        case 27:
                            if ((0x100000001000000L & l) != 0L) jjCheckNAdd(28);
                            break;
                        case 28:
                            if ((0x7e0000007eL & l) == 0L) break;
                            if (kind > 13) kind = 13;
                            jjCheckNAdd(28);
                            break;
                        case 29:
                            if ((0x400000004L & l) != 0L) jjstateSet[jjnewStateCnt++] = 30;
                            break;
                        default :
                            break;
                    }
                } while (i != startsAt);
            } else {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 1:
                            if ((jjbitVec0[i2] & l2) != 0L && kind > 7) kind = 7;
                            break;
                        case 8:
                            if ((jjbitVec0[i2] & l2) != 0L) jjAddStates(3, 5);
                            break;
                        default :
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 32 - (jjnewStateCnt = startsAt))) return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (IOException e) {
                return curPos;
            }
        }
    }

    private int jjMoveStringLiteralDfa0_3() {
        switch (curChar) {
            case 42:
                return jjMoveStringLiteralDfa1_3(0x800L);
            default :
                return 1;
        }
    }

    private int jjMoveStringLiteralDfa1_3(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            return 1;
        }
        switch (curChar) {
            case 47:
                if ((active0 & 0x800L) != 0L) return jjStopAtPos(1, 11);
                break;
            default :
                return 2;
        }
        return 2;
    }

    private int jjMoveStringLiteralDfa0_1() {
        return jjMoveNfa_1(0, 0);
    }

    private int jjMoveNfa_1(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 3;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        while (true) {
            if (++jjround == 0x7fffffff) ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0x2400L & l) != 0L) {
                                if (kind > 9) kind = 9;
                            }
                            if (curChar == 13) jjstateSet[jjnewStateCnt++] = 1;
                            break;
                        case 1:
                            if (curChar == 10 && kind > 9) kind = 9;
                            break;
                        case 2:
                            if (curChar == 13) jjstateSet[jjnewStateCnt++] = 1;
                            break;
                        default :
                            break;
                    }
                } while (i != startsAt);
            } else {
                do {
                    switch (jjstateSet[--i]) {
                        default :
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt))) return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (IOException e) {
                return curPos;
            }
        }
    }

    private int jjMoveStringLiteralDfa0_2() {
        switch (curChar) {
            case 42:
                return jjMoveStringLiteralDfa1_2(0x400L);
            default :
                return 1;
        }
    }

    private int jjMoveStringLiteralDfa1_2(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (IOException e) {
            return 1;
        }
        switch (curChar) {
            case 47:
                if ((active0 & 0x400L) != 0L) return jjStopAtPos(1, 10);
                break;
            default :
                return 2;
        }
        return 2;
    }

    static final int[] jjnextStates = { 27, 29, 31, 8, 9, 11, 8, 9, 13, 11, 10, 12, 14, };
    public static final String[] jjstrLiteralImages = { "", null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null,
            "\151\156\163\164\162\165\143\164\151\157\156",
            "\141\162\143\150\151\164\145\143\164\165\162\145", "\146\157\162\155\141\164",
            "\145\156\165\155", "\145\156\165\155\55\163\165\142\163\145\164",
            "\157\160\145\162\141\156\144\55\164\171\160\145", "\141\144\144\162\55\155\157\144\145",
            "\141\144\144\162\55\163\145\164", "\162\145\141\144", "\167\162\151\164\145",
            "\167\150\145\162\145", "\160\162\151\157\162\151\164\171", "\145\156\143\157\144\151\156\147",
            "\145\170\145\143\165\164\145", "\154\157\143\141\154", "\147\154\157\142\141\154",
            "\155\145\155\157\162\171", "\151\146", "\145\154\163\145", "\141\156\144", "\157\162",
            "\170\157\162", "\163\165\142\162\157\165\164\151\156\145", "\151\156\154\151\156\145",
            "\145\170\164\145\162\156\141\154", "\162\145\164\165\162\156", null, "\160\163\145\165\144\157",
            "\167\150\145\156", "\160\162\157\160\145\162\164\171", "\173", "\175", "\75", "\54", "\50",
            "\51", "\73", "\74\74", "\76\76", "\53", "\55", "\52", "\57", "\45", "\46", "\174", "\136", "\41",
            "\176", "\75\75", "\41\75", "\74", "\74\75", "\76", "\76\75", "\44", null, null, null, "\72",
            "\133", "\135", "\163\165\142\55\157\160\145\162\141\156\144", "\56", };
    public static final String[] lexStateNames = { "DEFAULT", "IN_SINGLE_LINE_COMMENT", "IN_FORMAL_COMMENT",
            "IN_MULTI_LINE_COMMENT", };
    public static final int[] jjnewLexState = { -1, -1, -1, -1, -1, -1, 1, 2, 3, 0, 0, 0, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, };
    static final long[] jjtoToken = { 0xfffffffffffc2001L, 0x7cfffL, };
    static final long[] jjtoSkip = { 0xe3eL, 0x0L, };
    static final long[] jjtoSpecial = { 0xe00L, 0x0L, };
    static final long[] jjtoMore = { 0x11c0L, 0x0L, };
    protected SimpleCharStream input_stream;
    private final int[] jjrounds = new int[32];
    private final int[] jjstateSet = new int[64];
    StringBuffer image;
    int jjimageLen;
    int lengthOfMatch;
    protected char curChar;

    public ISDLParserTokenManager(SimpleCharStream stream) {
        if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
        input_stream = stream;
    }

    public ISDLParserTokenManager(SimpleCharStream stream, int lexState) {
        this(stream);
        SwitchTo(lexState);
    }

    public void ReInit(SimpleCharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    private void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 32; i-- > 0;)
            jjrounds[i] = 0x80000000;
    }

    public void ReInit(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    public void SwitchTo(int lexState) {
        if (lexState >= 4 || lexState < 0)
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
        else curLexState = lexState;
    }

    protected Token jjFillToken() {
        Token t = Token.newToken(jjmatchedKind);
        t.kind = jjmatchedKind;
        String im = jjstrLiteralImages[jjmatchedKind];
        t.image = (im == null) ? input_stream.GetImage() : im;
        t.beginLine = input_stream.getBeginLine();
        t.beginColumn = input_stream.getBeginColumn();
        t.endLine = input_stream.getEndLine();
        t.endColumn = input_stream.getEndColumn();
        return t;
    }

    int curLexState = 0;
    int defaultLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    public Token getNextToken() {
        Token specialToken = null;
        Token matchedToken;
        int curPos = 0;

        EOFLoop :
        while (true) {
            try {
                curChar = input_stream.BeginToken();
            } catch (IOException e) {
                jjmatchedKind = 0;
                matchedToken = jjFillToken();
                matchedToken.specialToken = specialToken;
                return matchedToken;
            }
            image = null;
            jjimageLen = 0;

            while (true) {
                switch (curLexState) {
                    case 0:
                        try {
                            input_stream.backup(0);
                            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
                                curChar = input_stream.BeginToken();
                        } catch (IOException e1) {
                            continue EOFLoop;
                        }
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_0();
                        break;
                    case 1:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_1();
                        if (jjmatchedPos == 0 && jjmatchedKind > 12) {
                            jjmatchedKind = 12;
                        }
                        break;
                    case 2:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_2();
                        if (jjmatchedPos == 0 && jjmatchedKind > 12) {
                            jjmatchedKind = 12;
                        }
                        break;
                    case 3:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_3();
                        if (jjmatchedPos == 0 && jjmatchedKind > 12) {
                            jjmatchedKind = 12;
                        }
                        break;
                }
                if (jjmatchedKind != 0x7fffffff) {
                    if (jjmatchedPos + 1 < curPos) input_stream.backup(curPos - jjmatchedPos - 1);
                    if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                        matchedToken = jjFillToken();
                        matchedToken.specialToken = specialToken;
                        if (jjnewLexState[jjmatchedKind] != -1) curLexState = jjnewLexState[jjmatchedKind];
                        return matchedToken;
                    } else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                        if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                            matchedToken = jjFillToken();
                            if (specialToken == null) specialToken = matchedToken;
                            else {
                                matchedToken.specialToken = specialToken;
                                specialToken = (specialToken.next = matchedToken);
                            }
                            SkipLexicalActions(matchedToken);
                        } else SkipLexicalActions(null);
                        if (jjnewLexState[jjmatchedKind] != -1) curLexState = jjnewLexState[jjmatchedKind];
                        continue EOFLoop;
                    }
                    MoreLexicalActions();
                    if (jjnewLexState[jjmatchedKind] != -1) curLexState = jjnewLexState[jjmatchedKind];
                    curPos = 0;
                    jjmatchedKind = 0x7fffffff;
                    try {
                        curChar = input_stream.readChar();
                        continue;
                    } catch (IOException e1) {
                    }
                }
                int error_line = input_stream.getEndLine();
                int error_column = input_stream.getEndColumn();
                String error_after = null;
                boolean EOFSeen = false;
                try {
                    input_stream.readChar();
                    input_stream.backup(1);
                } catch (IOException e1) {
                    EOFSeen = true;
                    error_after = curPos <= 1 ? "" : input_stream.GetImage();
                    if (curChar == '\n' || curChar == '\r') {
                        error_line++;
                        error_column = 0;
                    } else error_column++;
                }
                if (!EOFSeen) {
                    input_stream.backup(1);
                    error_after = curPos <= 1 ? "" : input_stream.GetImage();
                }
                throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
            }
        }
    }

    void SkipLexicalActions(Token matchedToken) {
        switch (jjmatchedKind) {
            default :
                break;
        }
    }

    void MoreLexicalActions() {
        jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
        switch (jjmatchedKind) {
            case 7 :
                if (image == null) image = new StringBuffer();
                image.append(input_stream.GetSuffix(jjimageLen));
                jjimageLen = 0;
                input_stream.backup(1);
                break;
            default :
                break;
        }
    }
}
