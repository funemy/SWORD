/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
package com.ibm.wala.akkaTaskScheduler;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;

import com.ibm.wala.fixpoint.UnaryStatement;
import com.ibm.wala.ipa.callgraph.propagation.PointsToSetVariable;
import com.ibm.wala.util.intset.MutableIntSet;
import com.sun.javafx.scene.paint.GradientUtils.Point;

import akka.actor.ActorRef;
import akka.actor.Props;
import akka.actor.UntypedActor;
import akka.routing.BalancingPool;

public class SchedulerForSpecial extends UntypedActor{
  private final int nrOfWorkers;
  private final ArrayList<PointsToSetVariable> lhss;
  private final boolean isAddition;
  private ActorRef resultLister;
  private final MutableIntSet targets;

  private final long start = System.currentTimeMillis();
  private final ActorRef workerRouter;

  private int nrOfResults;
  private int nrOfChanges;
  private int nrOfWorks;

  private HashSet<PointsToSetVariable> scheduled = new HashSet<>();
  private HashSet<PointsToSetVariable> processed = new HashSet<>();


  public SchedulerForSpecial(final int nrOfWorkers, final ArrayList<PointsToSetVariable> lhss,
      final MutableIntSet targets, final boolean isAddition, ActorRef resultLister){
    this.nrOfWorkers = nrOfWorkers;
    this.lhss = lhss;
    this.targets = targets;
    this.isAddition = isAddition;
    this.resultLister = resultLister;
    Props props = Props.create(Worker.class).withRouter(new BalancingPool(nrOfWorkers));
    //new Props(Worker.class).withRouter(new RoundRobinRouter(nrOfWorkers));
    workerRouter = this.getContext().actorOf(props, "workerRouter");
  }

  @Override
  public void onReceive(Object message) throws Throwable {
    if(message instanceof WorkStart){
      Iterator<PointsToSetVariable> iterator = lhss.iterator();
      while(iterator.hasNext()){
        PointsToSetVariable user = iterator.next();
        workerRouter.tell(new WorkContentForSpecial(user, targets, isAddition, true), getSelf());
        nrOfWorks++;
      }
//    System.out.println("Initial distribution complete.");
    }else if(message instanceof ResetResult){
      ResetResult result = (ResetResult) message;
      nrOfResults++;
      ArrayList<PointsToSetVariable> nexts = result.getCheckNext();
      PointsToSetVariable v = result.getUser();
      if(!processed.contains(v)){
        processed.add(v);
        if(!nexts.isEmpty()){
          Iterator<PointsToSetVariable> iterator = nexts.iterator();
          while(iterator.hasNext()){
            PointsToSetVariable next = iterator.next();
            if(!scheduled.contains(next) && !processed.contains(next)){
                workerRouter.tell(new WorkContentForSpecial(next, targets, isAddition, false), getSelf());
                scheduled.add(next);
                nrOfWorks++;
            }
          }
        }
      }

//      System.out.println("result size: "+ nrOfResults);
      if(nrOfResults == nrOfWorks){
//        System.out.println("Duration(special): " + (System.currentTimeMillis() - start));
        System.err.println("num of variable checked and changed para: " + nrOfResults);
        resultLister.tell(CollectResetResults.getInstance(), getSelf());
        getContext().stop(getSelf());
      }
    }else {
      unhandled(message);
    }
  }

}
