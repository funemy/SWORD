/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
package com.ibm.wala.akkaTaskScheduler;

import java.util.ArrayList;

import com.ibm.wala.ipa.callgraph.propagation.AssignOperator;
import com.ibm.wala.ipa.callgraph.propagation.PointsToSetVariable;
import com.ibm.wala.ipa.callgraph.propagation.PropagationCallGraphBuilder;
import com.ibm.wala.ipa.callgraph.propagation.PropagationSystem;
import com.ibm.wala.util.intset.MutableIntSet;
import com.sun.org.apache.xpath.internal.operations.Bool;
import com.sun.org.apache.xpath.internal.operations.Mult;

import akka.actor.ActorRef;
import akka.actor.Props;
import akka.actor.UntypedActor;
import akka.routing.BalancingPool;

public class SchedulerForMultiRhs extends UntypedActor {

  private final int nrOfWorkers;
  private final PointsToSetVariable lhs;
  private final boolean isAddition;
  private final ArrayList<PointsToSetVariable> rhss;
  private AssignOperator op;
  private ActorRef resultLister;

  private final long start = System.currentTimeMillis();
  private final ActorRef workerRouter;

  private int nrOfResults;
  private int nrOfChanges;
  private int nrOfWorks;

  public SchedulerForMultiRhs(final int nrOfWorkers, final PointsToSetVariable lhs, AssignOperator op,
      final ArrayList<PointsToSetVariable> rhss, final ActorRef resultLister){
    this.nrOfWorkers = nrOfWorkers;
    this.lhs = lhs;
    this.isAddition = true;
    this.op = op;
    this.rhss = rhss;
    this.resultLister = resultLister;
    Props props = Props.create(WorkerMultiRhs.class).withRouter(new BalancingPool(nrOfWorkers));
    //new Props(Worker.class).withRouter(new RoundRobinRouter(nrOfWorkers));
    workerRouter = this.getContext().actorOf(props, "workerRouter");
  }


  @Override
  public void onReceive(Object message) throws Throwable {
    if(message instanceof WorkStart){
      for (PointsToSetVariable rhs : rhss) {
        if(isAddition){
          PropagationCallGraphBuilder.system.addStatement(lhs, op, rhs, true, true);
        }else{
          PropagationCallGraphBuilder.system.delStatement(lhs, op, rhs, true, true);
        }
        workerRouter.tell(new MultiRhs(lhs, rhs, isAddition), getSelf());
        nrOfWorks++;
      }
    }else if(message instanceof PFResult){
      nrOfResults++;
      if(nrOfResults == nrOfWorks){
        System.out.println("Duration(multirhs): " + (System.currentTimeMillis() - start));
        System.err.println("num of added rhs para: " + nrOfResults);
        resultLister.tell("stop", getSelf());
        getContext().stop(getSelf());
      }
    }else{
      unhandled(message);
    }
  }



}
