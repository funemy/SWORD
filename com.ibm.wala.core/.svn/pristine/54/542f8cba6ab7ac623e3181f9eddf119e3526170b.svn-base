package com.ibm.wala.akkaTaskScheduler;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.concurrent.ConcurrentLinkedQueue;

import com.ibm.wala.classLoader.NewSiteReference;
import com.ibm.wala.fixedpoint.impl.AbstractFixedPointSolver;
import com.ibm.wala.fixpoint.AbstractStatement;
import com.ibm.wala.fixpoint.IVariable;
import com.ibm.wala.fixpoint.UnaryStatement;
import com.ibm.wala.ipa.callgraph.CGNode;
import com.ibm.wala.ipa.callgraph.propagation.InstanceKey;
import com.ibm.wala.ipa.callgraph.propagation.PointerKey;
import com.ibm.wala.ipa.callgraph.propagation.PointsToSetVariable;
import com.ibm.wala.ipa.callgraph.propagation.PropagationCallGraphBuilder;
import com.ibm.wala.ipa.callgraph.propagation.PropagationGraph;
import com.ibm.wala.ipa.callgraph.propagation.PropagationSystem;
import com.ibm.wala.ipa.slicer.Statement;
import com.ibm.wala.ssa.SSAInstruction;
import com.ibm.wala.util.collections.Pair;
import com.ibm.wala.util.intset.IntIterator;
import com.ibm.wala.util.intset.IntSetAction;
import com.ibm.wala.util.intset.IntSetUtil;
import com.ibm.wala.util.intset.MutableIntSet;
import com.ibm.wala.util.intset.MutableSharedBitVectorIntSet;
import com.ibm.wala.util.intset.MutableSharedBitVectorIntSetFactory;
import com.ibm.wala.util.intset.MutableSparseIntSet;
import com.ibm.wala.util.intset.MutableSparseIntSetFactory;
import com.sun.javafx.scene.paint.GradientUtils.Point;
import com.sun.org.apache.bcel.internal.generic.NEW;

import akka.actor.UntypedActor;

public class Worker extends UntypedActor{

	@Override
	public void onReceive(Object message) throws Exception {
		// TODO Auto-generated method stub
		if(message instanceof WorkContentForCheckChange){
		  WorkContentForCheckChange work = (WorkContentForCheckChange) message;
		  // 		 ResetResult next = processCheckChange(work);  // too many redundant check
		  ResetResult next = processCheckChangeUpdate(work);
		  getSender().tell(next, getSelf());
		}else if(message instanceof WorkContentForSpecial){
		  WorkContentForSpecial work = (WorkContentForSpecial) message;
		  final boolean isAddition = work.getBoolean();
		  ResetResult result;
		  if(isAddition){
		    result = processSpecialWorkAddition(work);
		  }else{
		    if(work.getIsFirst())
		      result = processSpecialWorkDeletionFirst(work);
		    else
		      result = processSpecialWorkDeletion(work);
		  }
 		  getSender().tell(result, getSelf());
 		}
		else {
			unhandled(message);
		}
	}


  private HashSet<PointsToSetVariable> store = new HashSet<>();// for isreachable
  private HashSet<PointsToSetVariable> processed = new HashSet<>();// for pf


  private ResetResult processSpecialWorkAddition(WorkContentForSpecial work) {
    final PointsToSetVariable user = work.getUser();
    final MutableIntSet targets = work.getTargets();
    ArrayList<PointsToSetVariable> results = new ArrayList<>();
    final MutableSharedBitVectorIntSet localtargets = new MutableSharedBitVectorIntSetFactory().make();
    if(user.getValue() != null){
        IntSetAction action = new IntSetAction() {
          @Override
          public void act(int i) {
            if(!user.contains(i)){
              localtargets.add(i);
            }
          }
        };
        targets.foreach(action);
      processed.add(user);
//      results.add(user);
      if(!localtargets.isEmpty()){
        synchronized (user) {
          user.addAll(localtargets);
        }
//      further check
        for (Iterator it = PropagationSystem.flowGraph.getStatementsThatUse(user); it.hasNext();) {
          AbstractStatement s = (AbstractStatement) it.next();
          IVariable iv = s.getLHS();
          if(iv instanceof PointsToSetVariable){
            PointsToSetVariable pv = (PointsToSetVariable) iv;
            if(!processed.contains(pv))
//              processSpecialWorkAddition(new WorkContentForSpecial(pv, localtargets, true));
              results.add(pv);
          }
        }
      }
    }else{
      processed.add(user);
    }

    return new ResetResult(user, results);
  }

  private ResetResult processSpecialWorkDeletion(WorkContentForSpecial work) {
    final PointsToSetVariable user = work.getUser();
    final MutableIntSet targets = work.getTargets();
    ArrayList<PointsToSetVariable> results = new ArrayList<>();
    final MutableSharedBitVectorIntSet localtargets = new MutableSharedBitVectorIntSetFactory().make();
    if(user.getValue() != null){
      //reachability user
      synchronized (user) {
        user.removeSome(targets); //sync
      }
      for (Iterator it = PropagationSystem.flowGraph.getStatementsThatDef(user); it.hasNext();) {
        UnaryStatement s = (UnaryStatement) it.next();
        IVariable iv = s.getRightHandSide();
        if(iv instanceof PointsToSetVariable){
          PointsToSetVariable pv = (PointsToSetVariable) iv;
          IntSetAction action = new IntSetAction() {
            @Override
            public void act(int i) {
              if(targets.contains(i)){
                localtargets.add(i);
              }
            }
          };
          MutableIntSet set = pv.getValue();
          if(set != null){
            MutableIntSet set1;
            synchronized (pv) {
              set1 = IntSetUtil.makeMutableCopy(set);
            }
            set1.foreach(action);
          }
        }
      }
    }

    processed.add(user);
    //check change
    if(!localtargets.isEmpty()){
      synchronized (user) {
        user.addAll(localtargets); //sync
      }
//      further check
      for (Iterator it = PropagationSystem.flowGraph.getStatementsThatUse(user); it.hasNext();) {
        AbstractStatement s = (AbstractStatement) it.next();
        IVariable iv = s.getLHS();
        if(iv instanceof PointsToSetVariable){
          PointsToSetVariable pv = (PointsToSetVariable) iv;
          if(!processed.contains(pv))
//            processSpecialWorkDeletion(new WorkContentForSpecial(pv, localtargets, false));
            results.add(pv);
        }
      }
    }
    return new ResetResult(user, results);
  }

  private ResetResult processSpecialWorkDeletionFirst(WorkContentForSpecial work) {
    final PointsToSetVariable user = work.getUser();
    final MutableIntSet targets = work.getTargets();
    ArrayList<PointsToSetVariable> results = new ArrayList<>();
    MutableSparseIntSet localtargets = new MutableSparseIntSetFactory().makeCopy(targets);
    //reachability user
    boolean isReachable = false;
    IntIterator intIterator = targets.intIterator();
    while(intIterator.hasNext()){
      int delIndex = intIterator.next();
      InstanceKey instKey = PropagationCallGraphBuilder.system.getInstanceKey(delIndex);
      Iterator<Pair<CGNode, NewSiteReference>> pairIt = instKey.getCreationSites(PropagationSystem.cg);
      while(pairIt.hasNext()){//should be unique??
        Pair<CGNode, NewSiteReference> pair = pairIt.next();
        CGNode n = pair.fst;
        NewSiteReference site = pair.snd;
        SSAInstruction inst2;
        if(n.getIR().existNew(site)){
          inst2 = n.getIR().getNew(site);
        }else{
          continue;
        }
        Iterator<SSAInstruction> useIt =n.getDU().getUses(inst2.getDef());
        while(useIt.hasNext()){//may have multiple
          SSAInstruction useInstruction = useIt.next();
          int defIndex = useInstruction.getDef();
          if(defIndex==-1) continue;
          PointerKey basePointerKey = PropagationCallGraphBuilder.system.pointerAnalysis.getHeapModel().getPointerKeyForLocal(n, defIndex);
          PointsToSetVariable baseVar = PropagationCallGraphBuilder.system.findOrCreatePointsToSet(basePointerKey);
          //the statement should have already been removed from the graph
          if(baseVar!=null){
            isReachable = isReachableInFlowGraph(baseVar, user);//isReachableWithoutEdgeR2L(baseVar,L,R);
            if(isReachable) {
              localtargets.remove(delIndex);
              store.clear();
              break;
            }
          }
          store.clear();
        }
      }
    }
    processed.add(user);
    //check change
    if(!localtargets.isEmpty()){
//      further check
      synchronized (user) {
        user.removeSome(localtargets);
      }
      for (Iterator it = PropagationSystem.flowGraph.getStatementsThatUse(user); it.hasNext();) {
        AbstractStatement s = (AbstractStatement) it.next();
        IVariable iv = s.getLHS();
        if(iv instanceof PointsToSetVariable){
          PointsToSetVariable pv = (PointsToSetVariable) iv;
          if(!processed.contains(pv))
//            processSpecialWorkDeletion(new WorkContentForSpecial(pv, localtargets, false));
            results.add(pv);
        }
      }
    }
    return new ResetResult(user, results);
  }

	private ResetResult processCheckChange(WorkContentForCheckChange work) {
	  PointsToSetVariable user = work.getUser();
	  MutableIntSet targets = work.getTargets();
	  ArrayList<PointsToSetVariable> next = new ArrayList<>();
    MutableSparseIntSet localtargets = new MutableSparseIntSetFactory().makeCopy(targets);
	  //reachability user
    boolean isReachable = false;
    IntIterator intIterator = targets.intIterator();
    while(intIterator.hasNext()){
      int delIndex = intIterator.next();
      InstanceKey instKey = PropagationCallGraphBuilder.system.getInstanceKey(delIndex);
      Iterator<Pair<CGNode, NewSiteReference>> pairIt = instKey.getCreationSites(PropagationSystem.cg);
      while(pairIt.hasNext()){//should be unique??
        Pair<CGNode, NewSiteReference> pair = pairIt.next();
        CGNode n = pair.fst;
        NewSiteReference site = pair.snd;
        SSAInstruction inst2;
        if(n.getIR().existNew(site)){
          inst2 = n.getIR().getNew(site);
        }else{
          continue;
        }
        Iterator<SSAInstruction> useIt =n.getDU().getUses(inst2.getDef());
        while(useIt.hasNext()){//may have multiple
          SSAInstruction useInstruction = useIt.next();
          int defIndex = useInstruction.getDef();
          if(defIndex==-1) continue;
          PointerKey basePointerKey = PropagationCallGraphBuilder.system.pointerAnalysis.getHeapModel().getPointerKeyForLocal(n, defIndex);
          PointsToSetVariable baseVar = PropagationCallGraphBuilder.system.findOrCreatePointsToSet(basePointerKey);
          //the statement should have already been removed from the graph
          if(baseVar!=null){
            isReachable = isReachableInFlowGraph(baseVar, user);//isReachableWithoutEdgeR2L(baseVar,L,R);
            if(isReachable) {
              localtargets.remove(delIndex);
              store.clear();
              break;
            }
          }
          store.clear();
        }
      }
    }
	  //check change
	  if(!localtargets.isEmpty()){
	    //further check
	    user.removeSome(localtargets);
	    for (Iterator it = PropagationSystem.flowGraph.getStatementsThatUse(user); it.hasNext();) {
        AbstractStatement s = (AbstractStatement) it.next();
        IVariable iv = s.getLHS();
        if(iv instanceof PointsToSetVariable){
          PointsToSetVariable pv = (PointsToSetVariable) iv;
          next.add(pv);
        }
      }
	  }else{
	    next = null;
	  }
	  return new ResetResult(user, next);
  }


	private boolean isReachableInFlowGraph(PointsToSetVariable startVar, PointsToSetVariable endVar) {
    for (Iterator it = PropagationSystem.flowGraph.getStatementsThatUse(startVar); it.hasNext();) {
      AbstractStatement s = (AbstractStatement) it.next();
      IVariable iv = s.getLHS();
      if(store.contains(startVar)){
        return false;
      }else{
        store.add(startVar);
      }
      if(iv==endVar) return true;
      else if(iv instanceof PointsToSetVariable)
      {
        if(!iv.toString().contains("< Application"))
          continue;

        boolean isReachable =isReachableInFlowGraph((PointsToSetVariable)iv,endVar);
        if(isReachable) return true;
      }
    }
    return false;
  }

	private ResetResult processCheckChangeUpdate(WorkContentForCheckChange work) {
    final PointsToSetVariable user = work.getUser();
    final MutableIntSet targets = work.getTargets();
    ArrayList<PointsToSetVariable> next = new ArrayList<>();
    final MutableSharedBitVectorIntSet remaining = new MutableSharedBitVectorIntSetFactory().makeCopy(targets);
    if(user.getValue() != null){
      synchronized (user) {
        user.removeSome(targets);
      }
      //reachability user
//      System.out.println("user: "+ user.getOrderNumber());
      for (Iterator it = PropagationSystem.flowGraph.getStatementsThatDef(user); it.hasNext();) {
        UnaryStatement s = (UnaryStatement) it.next();
        IVariable iv = s.getRightHandSide();
        if(iv instanceof PointsToSetVariable){
          PointsToSetVariable pv = (PointsToSetVariable) iv;
          IntSetAction action = new IntSetAction() {
            @Override
            public void act(int i) {
              if(targets.contains(i)){
                remaining.remove(i);
              }
            }
          };
          MutableIntSet set = pv.getValue();
          if(set != null){
            MutableIntSet set1;
            synchronized (pv) {
              set1 = IntSetUtil.makeMutableCopy(set);
            }
            set1.foreach(action);
          }
        }
      }
    }else{
//      System.out.println("-----------user is: " + user.toString());
//      System.out.println("-----------target is: " + targets.toString());
    }
    //check if changed
    if(!remaining.isEmpty()){
      synchronized (user) {
        user.removeSome(remaining);
      }
//      further check
      for (Iterator it = PropagationSystem.flowGraph.getStatementsThatUse(user); it.hasNext();) {
        AbstractStatement s = (AbstractStatement) it.next();
        IVariable iv = s.getLHS();
        if(iv instanceof PointsToSetVariable){
          PointsToSetVariable pv = (PointsToSetVariable) iv;
//          System.out.println("------next: "+ pv.getOrderNumber());
          next.add(pv);
        }
      }
    }else{
      next = null;
    }
    return new ResetResult(user, next, remaining);
  }


//  private void processTaskForReset(WorkContentForRecompute work) {
//	  ArrayList<AbstractStatement> worklist = new ArrayList<>();
//	  PointsToSetVariable leader = work.getLeader();
//	  ArrayList<PointsToSetVariable> team = work.getMembers();
////	  ConcurrentLinkedQueue<PointsToSetVariable> localMembers = new ConcurrentLinkedQueue<>();
//	  boolean localChanges = false;
//	  for (Iterator it = PropagationSystem.flowGraph.getStatementsThatDef(leader); it.hasNext();) {
//      AbstractStatement s = (AbstractStatement) it.next();
//      byte code = s.evaluate();
//
//      if (code == 1) {
//        if(!AbstractFixedPointSolver.changes.contains(s.getLHS()))
//          AbstractFixedPointSolver.changes.add(s.getLHS());
//        localChanges = true;
//      }
//    }
//	  if(localChanges){
//	    for (Iterator it = PropagationSystem.flowGraph.getStatementsThatUse(leader); it.hasNext();) {
//	      AbstractStatement s = (AbstractStatement) it.next();
//	      s.evaluate();
////        if(s.getLHS() != null)
////          localMembers.add((PointsToSetVariable) s.getLHS());
////	      worklist.add(s);
//	    }
//	    localChanges = false;
//	  }
//
//    for(int i=0; i<team.size(); i++){
//      PointsToSetVariable member = team.get(i);
//      for (Iterator it = PropagationSystem.flowGraph.getStatementsThatDef(member); it.hasNext();) {
//        AbstractStatement s = (AbstractStatement) it.next();
//        byte code = s.evaluate();
//
//        if (code == 1) {
//          if(!AbstractFixedPointSolver.changes.contains(s.getLHS()))
//            AbstractFixedPointSolver.changes.add(s.getLHS());
//          localChanges = true;
//        }
//      }
//      if(localChanges){
//        for (Iterator it = PropagationSystem.flowGraph.getStatementsThatUse(member); it.hasNext();) {
//          AbstractStatement s = (AbstractStatement) it.next();
//          s.evaluate();
////          if(s.getLHS() != null)
////            localMembers.add((PointsToSetVariable) s.getLHS());
////          worklist.add(s);
//        }
//        localChanges = false;
//      }
//    }
//
////    return result;
//	}
//
//  private PointsToSetVariable processTaskForSet(WorkContentForSet work) {
//	  PointsToSetVariable v = work.getPointsToSetVariable();
//	  MutableIntSet targets = work.getTargets();
//	  synchronized (v) {
//      synchronized (targets) {
//        v.removeSome(targets);
//      }
//    }
////	  PropagationGraph flowGraph = work.getGraph();
////	  HashSet<IVariable> processedPoints = new HashSet<>();
////	  //find all second users
////	  ArrayList<PointsToSetVariable> allSecondUsers = findAllSecondUsers(leader, processedPoints);
////	  for (PointsToSetVariable secondUser : allSecondUsers) {
////	    synchronized (secondUser) {
////	      synchronized (targets) {
////	        secondUser.removeSome(targets); //sync?
////	      }
////	    }
////    }
////	  this.getContext().sender().tell(new Team(leader, allSecondUsers), getSelf());
//    return v;
//  }
//
//  private PointsToSetVariable processTaskForSingle(WorkContentForSingle work) {
//	  PointsToSetVariable ptv = work.getPointsToSetVariable();
//		int target = work.getTarget();
//		synchronized (ptv) {
////		  synchronized (target) {
//		     ptv.remove(target); //sync?
////      }
//    }
//		return ptv;
//	}
//
//  private void processTaskForFinding(WorkContentForFind work){
//    PointsToSetVariable leader = work.getPointsToSetVariable();
//    MutableIntSet targets = work.getTargets();
//    synchronized (leader) {
//      synchronized (targets) {
//        leader.removeSome(targets);
//      }
//    }
//    HashSet<IVariable> processedPoints = new HashSet<>();
//    //find all second users
//    ArrayList<PointsToSetVariable> allSecondUsers = findAllSecondUsers(leader, processedPoints);
//  }


//  private ArrayList<PointsToSetVariable> findAllSecondUsers(PointsToSetVariable L, HashSet<IVariable> processedPoints){
//    ArrayList<PointsToSetVariable> results = new ArrayList<>();
//    Iterator it = PropagationSystem.flowGraph.getStatementsThatUse(L);
//    while(it.hasNext()){
//      AbstractStatement s = (AbstractStatement) it.next();
//      IVariable iv = s.getLHS();
//      if(iv instanceof PointsToSetVariable && !processedPoints.contains(iv))
//      {
//        processedPoints.add(iv);
//        PointsToSetVariable pv = (PointsToSetVariable)iv;
////        addToWorkList(s);
//        results.add(pv);
//        results.addAll(findAllSecondUsers(pv, processedPoints));
//      }
//    }
//    return results;
//  }

}
