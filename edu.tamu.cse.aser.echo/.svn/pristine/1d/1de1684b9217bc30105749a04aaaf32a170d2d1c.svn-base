package edu.tamu.aser.tide.plugin;

import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IMarker;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IPath;
import org.eclipse.jdt.core.ElementChangedEvent;
import org.eclipse.jdt.core.ICompilationUnit;
import org.eclipse.jdt.core.IElementChangedListener;
import org.eclipse.jdt.core.IJavaElement;
import org.eclipse.jdt.core.IJavaElementDelta;
import org.eclipse.jdt.core.IJavaProject;
import org.eclipse.jdt.core.IMethod;
import org.eclipse.jdt.core.IType;
import org.eclipse.jdt.core.JavaModelException;
import org.eclipse.jdt.core.dom.AST;
import org.eclipse.jdt.core.dom.ASTMatcher;
import org.eclipse.jdt.core.dom.ASTNode;
import org.eclipse.jdt.core.dom.ASTParser;
import org.eclipse.jdt.core.dom.ASTVisitor;
import org.eclipse.jdt.core.dom.CompilationUnit;
import org.eclipse.jdt.core.dom.MethodDeclaration;
import org.eclipse.jdt.core.dom.PackageDeclaration;
import org.eclipse.jdt.core.dom.TypeDeclaration;
import org.eclipse.jdt.internal.core.JavaElementDelta;
import org.eclipse.jdt.internal.core.SourceMethod;
import org.eclipse.jdt.internal.core.SourceType;
import org.eclipse.jface.text.BadLocationException;
import org.eclipse.jface.text.IDocument;
import org.eclipse.jface.text.IRegion;
import org.eclipse.ui.IEditorRegistry;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.PartInitException;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.part.FileEditorInput;
import org.eclipse.ui.texteditor.AbstractTextEditor;

import com.ibm.wala.ipa.callgraph.AnalysisCache;
import com.ibm.wala.ipa.callgraph.AnalysisOptions;
import com.ibm.wala.ipa.callgraph.impl.Everywhere;
import com.ibm.wala.ipa.cha.ClassHierarchy;
import com.ibm.wala.ssa.IR;
import com.ibm.wala.ssa.SSAOptions;
import com.ibm.wala.types.ClassLoaderReference;
import com.ibm.wala.types.Descriptor;
import com.ibm.wala.types.MethodReference;
import com.ibm.wala.types.TypeName;
import com.ibm.wala.types.TypeReference;
import com.ibm.wala.util.debug.Assertions;
import com.ibm.wala.util.strings.Atom;
import com.ibm.wala.util.strings.StringStuff;

import edu.tamu.aser.tide.engine.TIDERace;
import edu.tamu.aser.tide.marker.RaceMarker;
import edu.tamu.aser.tide.trace.MemNode;


public class MyJavaElementChangeReporter implements IElementChangedListener {

	MyASTVisitor myASTVisitor = new MyASTVisitor();
	ASTParser parser = ASTParser.newParser(AST.JLS8);

    private void traverseAndPrint(IJavaElementDelta delta) {
        switch (delta.getKind()) {
            case IJavaElementDelta.ADDED:
                System.out.println(delta.getElement() + " was added");
                break;
            case IJavaElementDelta.REMOVED:
                System.out.println(delta.getElement() + " was removed");
                break;
            case IJavaElementDelta.CHANGED:
                System.out.println(delta.getElement() + " was changed");
                if ((delta.getFlags() & IJavaElementDelta.F_CHILDREN) != 0) {
                    System.out.println("The change was in its children");
                }
                if ((delta.getFlags() & IJavaElementDelta.F_CONTENT) != 0) {
                    System.out.println("The change was in its content");
                }
                /* Others flags can also be checked */
                break;
        }
        IJavaElementDelta[] children = delta.getAffectedChildren();
        for (int i = 0; i < children.length; i++) {
            traverseAndPrint(children[i]);
        }
    }


      public void elementChanged(ElementChangedEvent event) {
         IJavaElementDelta delta= event.getDelta();
         IJavaElementDelta[] deltas = delta.getAffectedChildren();
         while(deltas.length>0){
        	 delta = deltas[0];
        	 deltas = delta.getAffectedChildren();
         }
         //traverseAndPrint(delta);

         //if (delta instanceof JavaElementDelta)
         {

            IJavaElement elem = ((JavaElementDelta)delta).getElement();

            if(elem instanceof ICompilationUnit)
            {
            	//ICompilationUnit unit = (ICompilationUnit) elem;
            	//IPath path = unit.getPath().makeAbsolute();

/*
            	IType[] allTypes;
				try {
					allTypes = unit.getAllTypes();
	                for (IType type : allTypes) {
	                	String classType = type.getFullyQualifiedName();
                        classType = StringStuff.deployment2CanonicalTypeString(classType);
                        TypeReference t = TypeReference.findOrCreate(ClassLoaderReference.Application, classType);

	                	IMethod[] methods = type.getMethods();
	                    for (IMethod method : methods) {
	                        //System.out.println("Method name " + method.getElementName());
	                        //System.out.println("Signature " + method.getSignature());
	                        //System.out.println("Return Type " + method.getReturnType());



	                        String methodName = method.getElementName();

	                        String signature = method.getSignature();
	                        if(signature.startsWith("Q"))
	                        {
	                        	//TODO: resolve type
	                        	System.err.println("Signature type is unresolved: "+signature);
	                        	continue;
	                        }
	                        else
	                        	System.err.println("Signature type is GOOD: "+signature);

	                        Descriptor description = Descriptor.findOrCreateUTF8(signature);

	                        MethodReference mr = MethodReference.findOrCreate(t,
	                        		Atom.findOrCreateUnicodeAtom(methodName),
	                        	description);

	                        Activator.getDefault().getHandler().handleMethodChange(delta.getElement().getJavaProject(),mr);
}
	                }


				} catch (JavaModelException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}*/


            	//String source = ((CompilationUnit) elem).getCompilationUnit().getSource();
            	//org.eclipse.jdt.core.dom.CompilationUnit unit =event.getDelta().getCompilationUnitAST();
            	parser.setSource((ICompilationUnit)elem);
                //parser.setResolveBindings(true);
               ASTNode unit = parser.createAST(null);

            	if(unit!=null)unit.accept(myASTVisitor);

            }
            else if (elem instanceof SourceMethod)//method modifier change
            {
            	String methodName = ((SourceMethod)elem).getElementName();

            	IJavaElement elem2 = ((SourceMethod)elem).getParent();
            	String className = ((SourceType)elem2).getElementName();
            	String packageName = ((SourceType)elem2).getPackageFragment().getElementName();

            	myASTVisitor.setChangedItem(packageName, className, methodName);
            }

        	if(myASTVisitor.hasChanged())
        	{
                final IPath path =   delta.getElement().getPath();
            	IFile file = ResourcesPlugin.getWorkspace().getRoot().getFile(path);
            	final IJavaProject javaProject = delta.getElement().getJavaProject();
            	long start_time = System.currentTimeMillis();

            	Activator.getDefault().getHandler().handleMethodChange(javaProject,file,myASTVisitor.getChangedItem());
            	System.err.println("Incremental Time: "+(System.currentTimeMillis()-start_time));
            	myASTVisitor.reSetChangedItem();
        	}
         }
      }

class MyASTVisitor extends ASTVisitor
{
	private HashMap<String,ASTNode> subtrees = new HashMap<String,ASTNode>();
	private ChangedItem changed = new ChangedItem();
	private    boolean active;

	public ChangedItem getChangedItem()
	{
	return changed;
	}

	public boolean hasChanged()
	{
		return active;
	}
	 public void setChangedItem(String packageName, String className, String methodName)
	  {
		 changed.packageName = packageName;
		 changed.className = className;
		 changed.methodName = methodName;

	    active = true;
	  }
	public void reSetChangedItem()
	{
		active = false;
		changed.packageName = "";//empty
	}

	@Override
	public boolean visit(PackageDeclaration node) {

		String packageName = node.getName().toString();
		changed.packageName = packageName;
		return true;
	}
        @Override
        public boolean visit(MethodDeclaration node) {
        	String methodName = node.getName().toString();//method name
            ASTNode parent = node.getParent();
            String className = ((TypeDeclaration)parent).getName().toString();

            if(methodName.equals(className))//TODO:  support static constructor?
            	methodName = "<init>";

            //full signature
            String fullName = changed.packageName+"."+className+"."+methodName;

            //System.out.println(node);
            // Finding match for this methods name(mName) in saved method subtrees...
            boolean methodHasChanged = false;
            if (subtrees.containsKey(fullName)) {
                // Found match
                // Comparing new subtree to one saved during an earlier event (using ASTNode.subtreeMatch())
                methodHasChanged = !node.subtreeMatch(new ASTMatcher(), subtrees.get(fullName));
            } else {
                // No earlier entry found, definitely changed
                methodHasChanged = true;
            }
            if (methodHasChanged) {

            	active = true;

            	changed.methodName = methodName;

                changed.className = className;

                // "changed" is a HashMap of IMethods that have been earlierly identified as changed
                // "added" works similarly but for added methods (using IJavaElementDelta.getAddedChildren())
//                if (!changed.containsKey(mName) && !added.containsKey(mName)) {
//                    // Method has indeed changed and is not yet queued for further actions
//                    changed.put(mName, (IMethod) node.resolveBinding().getJavaElement());
//                }
            }
            // "subtrees" must be updated with every method's AST subtree in order for this to work
            subtrees.put(fullName, node);
            // continue visiting after first MethodDeclaration

            return false;
        }
}

   }
