import java.io.File;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IWorkspaceRoot;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.jdt.core.IJavaProject;
import org.eclipse.jdt.core.JavaCore;
import org.eclipse.jdt.internal.corext.fix.AbstractFix;

import com.ibm.wala.classLoader.IClass;
import com.ibm.wala.classLoader.IMethod;
import com.ibm.wala.fixedpoint.impl.AbstractFixedPointSolver;
import com.ibm.wala.ipa.callgraph.AnalysisCache;
import com.ibm.wala.ipa.callgraph.AnalysisOptions;
import com.ibm.wala.ipa.callgraph.AnalysisScope;
import com.ibm.wala.ipa.callgraph.CGNode;
import com.ibm.wala.ipa.callgraph.CallGraph;
import com.ibm.wala.ipa.callgraph.CallGraphBuilder;
import com.ibm.wala.ipa.callgraph.Entrypoint;
import com.ibm.wala.ipa.callgraph.impl.DefaultEntrypoint;
import com.ibm.wala.ipa.callgraph.impl.Util;
import com.ibm.wala.ipa.callgraph.propagation.InstanceKey;
import com.ibm.wala.ipa.callgraph.propagation.PointerAnalysis;
import com.ibm.wala.ipa.callgraph.propagation.PointerAnalysisImpl;
import com.ibm.wala.ipa.callgraph.propagation.PointerKey;
import com.ibm.wala.ipa.callgraph.propagation.PropagationCallGraphBuilder;
import com.ibm.wala.ipa.callgraph.propagation.SSAPropagationCallGraphBuilder;
import com.ibm.wala.ipa.cha.ClassHierarchy;
import com.ibm.wala.ipa.cha.IClassHierarchy;
import com.ibm.wala.util.collections.HashSetFactory;
import com.ibm.wala.util.config.AnalysisScopeReader;
import com.ibm.wala.util.io.FileProvider;

import edu.tamu.aser.tide.engine.AnalysisUtils;
import edu.tamu.aser.tide.engine.TIDECGModel;
import edu.tamu.aser.tide.engine.TIDEDeadlock;
import edu.tamu.aser.tide.engine.TIDEDeadlockEngine;
import edu.tamu.aser.tide.engine.TIDERace;
import edu.tamu.aser.tide.engine.TIDEEngine;
import edu.tamu.aser.tide.plugin.handlers.ConvertHandler;
import edu.tamu.aser.tide.trace.LockNode;
import edu.tamu.aser.tide.trace.MemNode;

public class Test {

	static PrintStream ps;
	static void print(String msg, boolean printErr)
	{
		try{
			if(ps==null)
				ps = new PrintStream(new FileOutputStream("log_sunflow_para_noscc"));

			ps.println(msg);

			if(printErr)
				System.err.println(msg);
		}catch(Exception e)
		{
			e.printStackTrace();
		}
	}
	public static void main(String[] args) {


		//project
		try{
			//			IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();
			//			IProject project = root.getProject("tiny");
			//			IJavaProject javaProject = JavaCore.create(project);
			boolean OPT = false;
			boolean includeAllMainEntryPoints = false;
			//for testing
			//AnalysisScope scope = AnalysisScopeReader.readJavaScope("data/hello.txt", (new FileProvider()).getFile("data/EclipseDefaultExclusions.txt"), Test.class.getClassLoader());
			//String mainClassName = "Hello";

			//OPT = true;

			//WeblechSpider H2TestMulti TestXStream Tsp Loader SoftTest Manager MergeSort Racey Micro pool107
			//JGFMolDynBenchSizeA JGFMonteCarloBenchSizeA JGFRayTracerBenchSizeA  FFileWriter
			//Example
			String mainClassName = "H2TestMulti";
			//FFileWriter  Sunflow  Example  Tsp   H2TestMulti   Derby2861   TestXStream   Sunflow  WeblechSpider  Main

			//for experiments
			AnalysisScope scope = AnalysisScopeReader.readJavaScope("data/test.txt", (new FileProvider()).getFile("data/EclipseDefaultExclusions.txt"), Test.class.getClassLoader());

			ClassHierarchy cha = ClassHierarchy.make(scope);

			String mainSignature = ".main"+ConvertHandler.DESC_MAIN;;
			String mainMethodSig = mainClassName+mainSignature;
//			String mainMethodSig = "SunflowGUI$";
//			String mainMethodSig = "driver.TestMulti";

			Iterable<Entrypoint> entrypoints = findEntryPoints(cha,mainClassName,includeAllMainEntryPoints);

			AnalysisOptions options = new AnalysisOptions(scope, entrypoints);

		    //parallel incremental experiment ->
//			SSAPropagationCallGraphBuilder builder = Util.makeZeroCFABuilder(options, new AnalysisCache(), cha, scope);
			//SSAPropagationCallGraphBuilder builder = Util.makeVanillaZeroOneCFABuilder(options, new AnalysisCache(), cha, scope);
			SSAPropagationCallGraphBuilder builder = Util.makeZeroOneContainerCFABuilder(options, new AnalysisCache(), cha, scope);

			//can make use some other pointsto analysis?
			// Util.makeZeroOneContainerCFABuilder(options, cache, cha, scope)


			long start_time = System.currentTimeMillis();
			CallGraph cg  = builder.makeCallGraph(options, null);
//			System.err.println("wl for whole p: "+ AbstractFixedPointSolver.countforTotalWL);
			PointerAnalysis<InstanceKey> pta = builder.getPointerAnalysis();
			System.out.println("Call Graph Construction Time: "+(System.currentTimeMillis()-start_time));
			System.out.println("SCC Time: "+(System.currentTimeMillis()-start_time));

			print("Call Graph Construction Time: "+(System.currentTimeMillis()-start_time),true);
			int numofCGNodes = cg.getNumberOfNodes();

			int totalInstanceKey = pta.getInstanceKeys().size();
			int totalPointerKey =((PointerAnalysisImpl)pta).getNumOfPointerKeys();
			int totalPointerEdge = 0;
			int totalClass=cha.getNumberOfClasses();
			Iterator<PointerKey> iter = pta.getPointerKeys().iterator();
			while(iter.hasNext())
			{
				PointerKey key = iter.next();
				int size = pta.getPointsToSet(key).size();
				totalPointerEdge+=size;
			}
			System.err.println("class: "+totalClass +"   methods: " + numofCGNodes + "   pointer: " + totalPointerKey+ "   instance: " + totalInstanceKey+ "   edges: " + totalPointerEdge);

//			System.err.println("NUM OF CG NODES: "+numofCGNodes +"     NUM OF instance key: " + totalInstanceKey + "     NUM OF pointer key: " + totalPointerKey);
//			PrintStream pStreamptg = new PrintStream(new FileOutputStream("sequentialptg.txt"));
//			System.setOut(pStreamptg);
//			System.out.println("POINTS TO GRAPH --------------------------------- "+(System.currentTimeMillis()-start_time));
//			System.out.println(pta.toString());
//			pStreamptg.close();
//			if (true) {
//				return;
//			}
			print("Total Pointer Keys: "+totalPointerKey,true);
			print("Total Instance Keys: "+totalInstanceKey,true);
			print("Total Pointer Edges: "+totalPointerEdge,true);
			print("Total Classes: "+totalClass,true);

//		    start_time = System.currentTimeMillis();
//			TIDEEngine engine = new TIDEEngine((includeAllMainEntryPoints?mainSignature:mainMethodSig),cg,pta);
//			Set<TIDERace> races = engine.detectRace();
//			for(TIDERace race:races)
//			{
//				String sig = race.sig;
//				MemNode rnode = race.node1;
//				MemNode wnode = race.node2;
//				int findex = sig.indexOf('.');
//				int lindex = sig.lastIndexOf('.');
//				if(findex!=lindex)
//					sig =sig.substring(0, lindex);//remove instance hashcode
//
//				String raceMsg = "Race: "+sig+" ("+rnode.getSig()+", "+wnode.getSig()+")";
//				print(raceMsg,true);
//			}
//			print("Total Race Detection Time: "+(System.currentTimeMillis()-start_time),true);
//
//			//detect deadlocks
//			start_time = System.currentTimeMillis();
//
//			TIDEDeadlockEngine dlEngine = new TIDEDeadlockEngine(mainMethodSig,cg,pta);
//			Set<TIDEDeadlock> deadlocks = dlEngine.detectDeadlock();
//			if(deadlocks.size() == 0)
//				System.out.println("No deadlocks");
//			for(TIDEDeadlock deadlock: deadlocks)
//			{
//				LockNode l11 = deadlock.lp1.lock1;
//				LockNode l12 = deadlock.lp1.lock2;
//				LockNode l21 = deadlock.lp2.lock1;
//				LockNode l22 = deadlock.lp2.lock2;
//
//				String s11 = l11.instSig;
//				String s12 = l12.instSig;
//				String s21 = l21.instSig;
//				String s22 = l22.instSig;
//
//				String deadlockMsg = "Deadlock: ("+s11+","+s12+";"+s21+","+s22+")";
//				System.err.println("Deadlock: ("+s11+","+s12+";"+s21+","+s22+")");
//				print(deadlockMsg,true);
//			}
//			print("Total Deadlock Detection Time: "+(System.currentTimeMillis()-start_time),true);
//
//
//
//			if(true) return;//test race detection only

			//for validation only
//			int SIZE1 = races.size();



			int totalMethod =0;
			int totalInst =0;

			if(OPT)
				builder.getPropagationSystem().setOptimize(true);

			long test_change_start_time = System.currentTimeMillis();

			builder.initialSheet();
			Iterator<CGNode> iter2 = cg.iterator();
			HashSet<CGNode> storeCG = new HashSet<>();
			while(iter2.hasNext()){
				storeCG.add(iter2.next());
			}

			for (CGNode n : storeCG) {
				if(!n.getMethod().getSignature().contains("com.ibm.wala"))
				{
					totalMethod++;
					//System.out.println("Test change in Method "+n.getMethod().getSignature());
					int size = builder.testChange(n,ps);
					totalInst+=size;
				}
				if(PropagationCallGraphBuilder.totaltime >= 3600000)//7200000  5400000
					break;
			}

//			for(CGNode n: cg){
//				if(!n.getMethod().getSignature().contains("com.ibm.wala"))
//				{
//					totalMethod++;
//					//System.out.println("Test change in Method "+n.getMethod().getSignature());
//					int size = builder.testChange(n,ps);
//					totalInst+=size;
//				}
//				if(PropagationCallGraphBuilder.totaltime >= 3600000)//7200000  5400000
//					break;
//			}
			long total_test_change_time = (System.currentTimeMillis()-test_change_start_time);

			FileOutputStream outputStream = new FileOutputStream(new File("/Users/Bozhen/Documents/Eclipse2/Test_traverseInAkka_1/pResult.xls"));
			PropagationCallGraphBuilder.wb.write(outputStream);
			outputStream.close();

			print("Total Methods: "+totalMethod,true);
			print("Total Instructions: "+totalInst,true);
			print("Total Test Change Time: "+total_test_change_time+"ms",true);
			print("counter: " + builder.instCounter, true);
			System.out.println("total change time" + PropagationCallGraphBuilder.totaltime);


//			engine = new TIDEEngine(mainMethodSig,cg,pta);
//			Set<TIDERace> races2 = engine.detectRace();
//			int SIZE2= races2.size();
//
//			if(SIZE2==SIZE1)
//				print("Matched.",true);
//			else
//				print("Not Matched.",true);

		}catch(Exception e)
		{
			e.printStackTrace();
		}

		//run whole race detection

		//traverse each instruction


		ps.close();

	}

	public static Iterable<Entrypoint> findEntryPoints(IClassHierarchy classHierarchy, String mainClassName, boolean includeAll) {
		final Set<Entrypoint> result = HashSetFactory.make();
		Iterator<IClass> classIterator = classHierarchy.iterator();
		while (classIterator.hasNext()) {
			IClass klass = classIterator.next();
			if (!AnalysisUtils.isJDKClass(klass)) {
				for (IMethod method : klass.getDeclaredMethods()) {
					try {
						//debug
						//						if (method.toString().contains("Thread")) {
						//							System.out.println("");
						//						}
						//String methodname = method.getName().toString();
						if(method.isStatic()&&method.isPublic()
								&&method.getName().toString().equals("main")
								&&method.getDescriptor().toString().equals(ConvertHandler.DESC_MAIN))
						{
							//Test: accept only one main entryPoint
							if(includeAll
									||klass.getName().toString().contains(mainClassName))
								result.add(new DefaultEntrypoint(method, classHierarchy));
						}
						else if(method.isPublic()&&!method.isStatic()
								&&method.getName().toString().equals("run")
								&&method.getDescriptor().toString().equals("()V"))
						{
							if (AnalysisUtils.implementsRunnableInterface(klass) || AnalysisUtils.extendsThreadClass(klass))
								result.add(new DefaultEntrypoint(method, classHierarchy));

						}
					} catch (Exception e) {
						throw new RuntimeException(e);
					}
				}
			}
		}

		//show entry points
		for(Entrypoint entry:result)
		{
			System.out.println(entry.getMethod().getSignature());
		}

		return new Iterable<Entrypoint>() {
			public Iterator<Entrypoint> iterator() {
				return result.iterator();
			}
		};

	}



}
