/**
 * This file is licensed under the University of Illinois/NCSA Open Source License. See LICENSE.TXT for details.
 */
package edu.tamu.aser.tide.engine;

import java.io.IOException;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IMarker;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IPath;
import org.eclipse.jdt.core.IJavaProject;

import com.ibm.wala.cast.ipa.callgraph.AstCallGraph;
import com.ibm.wala.cast.ipa.callgraph.AstCallGraph.AstCGNode;
import com.ibm.wala.cfg.ControlFlowGraph;
import com.ibm.wala.classLoader.CallSiteReference;
import com.ibm.wala.classLoader.IBytecodeMethod;
import com.ibm.wala.classLoader.IClass;
import com.ibm.wala.classLoader.IMethod;
import com.ibm.wala.classLoader.ShrikeCTMethod;
import com.ibm.wala.eclipse.cg.model.WalaProjectCGModel;
import com.ibm.wala.ipa.callgraph.AnalysisCache;
import com.ibm.wala.ipa.callgraph.AnalysisOptions;
import com.ibm.wala.ipa.callgraph.AnalysisScope;
import com.ibm.wala.ipa.callgraph.CGNode;
import com.ibm.wala.ipa.callgraph.CallGraph;
import com.ibm.wala.ipa.callgraph.Entrypoint;
import com.ibm.wala.ipa.callgraph.impl.DefaultEntrypoint;
import com.ibm.wala.ipa.callgraph.impl.Everywhere;
import com.ibm.wala.ipa.callgraph.propagation.InstanceKey;
import com.ibm.wala.ipa.callgraph.propagation.NormalAllocationInNode;
import com.ibm.wala.ipa.callgraph.propagation.PointerAnalysis;
import com.ibm.wala.ipa.callgraph.propagation.PointerKey;
import com.ibm.wala.ipa.cha.IClassHierarchy;
import com.ibm.wala.ssa.IR;
import com.ibm.wala.ssa.ISSABasicBlock;
import com.ibm.wala.ssa.SSAAbstractInvokeInstruction;
import com.ibm.wala.ssa.SSAArrayReferenceInstruction;
import com.ibm.wala.ssa.SSAFieldAccessInstruction;
import com.ibm.wala.ssa.SSAGetInstruction;
import com.ibm.wala.ssa.SSAInstruction;
import com.ibm.wala.ssa.SSAInvokeInstruction;
import com.ibm.wala.ssa.SSAMonitorInstruction;
import com.ibm.wala.types.MethodReference;
import com.ibm.wala.util.WalaException;
import com.ibm.wala.util.collections.HashSetFactory;
import com.ibm.wala.util.graph.InferGraphRoots;
import com.ibm.wala.util.intset.OrdinalSet;

import edu.tamu.aser.tide.graph.LockSetEngine;
import edu.tamu.aser.tide.graph.ReachabilityEngine;
import edu.tamu.aser.tide.marker.RaceMarker;
import edu.tamu.aser.tide.plugin.handlers.ConvertHandler;
import edu.tamu.aser.tide.trace.MemNode;
import edu.tamu.aser.tide.trace.INode;
import edu.tamu.aser.tide.trace.SyncNode;
import edu.tamu.aser.tide.trace.JoinNode;
import edu.tamu.aser.tide.trace.LockNode;
import edu.tamu.aser.tide.trace.LockPair;
import edu.tamu.aser.tide.trace.ReadNode;
import edu.tamu.aser.tide.trace.StartNode;
import edu.tamu.aser.tide.trace.UnlockNode;
import edu.tamu.aser.tide.trace.WriteNode;

public class TIDECGModel extends WalaProjectCGModel {

	public AnalysisCache getCache()
	{
		return engine.getCache();
	}
	public AnalysisOptions getOptions()
	{
		return engine.getOptions();
	}
	private String entrySignature;
	public TIDECGModel(IJavaProject project, String exclusionsFile, String mainMethodSignature) throws IOException, CoreException {
		super(project, exclusionsFile);
		this.entrySignature = mainMethodSignature;

	}


	public Set<ITIDEBug> detectBug() {

		TIDEEngine raceEngine = new TIDEEngine(entrySignature,callGraph,engine.getPointerAnalysis());
		Set<TIDERace> races = raceEngine.detectRace();

		TIDELockEngine dlEngine = new TIDELockEngine(entrySignature,callGraph,engine.getPointerAnalysis());
		Set<DLNode> deadlocks = dlEngine.deteckLock();

		Set<ITIDEBug> bugs = new HashSet();

		bugs.addAll(races);
		bugs.addAll(deadlocks);

		return bugs;

	}

	public void updateGUI(IFile file, Set<ITIDEBug> bugs) {

	try{

		IPath fullPath = file.getProject().getFullPath();//full path of the project

		file.deleteMarkers(RaceMarker.TYPE_SCARIEST, false, 0);

		for(ITIDEBug bug:bugs)
		{
			if(bug instanceof TIDERace)
				showRace(fullPath, (TIDERace) bug);
			else if (bug instanceof DLNode)
				showDeadlock(fullPath,(DLNode) bug);
//                PrintableString elem = new PrintableString(
//                		file.getName(),//filename
//                            "line",//line number
//                            file);//I


//        IEditorRegistry editorRegistry = PlatformUI.getWorkbench()
//                .getEditorRegistry();
//
//        String editorId = editorRegistry.getDefaultEditor(
//                file.getFullPath().toString()).getId();
//        IWorkbenchPage page = PlatformUI.getWorkbench()
//                .getActiveWorkbenchWindow().getActivePage();
//
//            AbstractTextEditor ePart = (AbstractTextEditor) page
//                    .openEditor(new FileEditorInput(file),
//                            editorId);
//            IDocument document = ePart.getDocumentProvider()
//                    .getDocument(ePart.getEditorInput());
//            if (document != null) {
//                IRegion lineInfo_r = null, lineInfo_w = null;
//
//                    lineInfo_r = document.getLineInformation(rnode.getLine() - 1);
//                    lineInfo_w = document.getLineInformation(wnode.getLine() - 1);
//
//	                if (lineInfo_r != null&&lineInfo_w != null) {
//	                    ePart.selectAndReveal(lineInfo_r.getOffset(),
//	                            lineInfo_r.getLength());
//	                    ePart.selectAndReveal(lineInfo_w.getOffset(),
//	                            lineInfo_w.getLength());
//	                }
//            }
		}
	}
		  catch (Exception e) {
	            e.printStackTrace();
	        }
	}
	private void showDeadlock(IPath fullPath, DLNode bug) throws CoreException {
		// TODO Auto-generated method stub

		Locknode l11 = bug.node1;
		Locknode l12 = bug.node2;
		Locknode l21 = bug.node3;
		Locknode l22 = bug.node4;

		String s11 = l11.getLockSig();
		String s12 = l12.getLockSig();
		String s21 = l21.getLockSig();
		String s22 = l22.getLockSig();

		int line11 = l11.getStartPosition();
		int line12 = l12.getStartPosition();
		int line21 = l21.getStartPosition();
		int line22 = l22.getStartPosition();


		String deadlockMsg = "Deadlock: ("+s11+ "@"+line11 +","+s12+"@"+line12 +";  "+s21+"@"+line21 +","+s22+"@"+line22 +")";
//		String deadlockMsg = "Deadlock: ("+s11+ ","+s12+";  "+s21+","+s22+")";

		System.err.println(deadlockMsg);

		IFile file11 = getFileFromSig(fullPath,s11);
		IFile file12 = getFileFromSig(fullPath,s12);
		IFile file21 = getFileFromSig(fullPath,s21);
		IFile file22 = getFileFromSig(fullPath,s22);

			createMarker(file11,line11,deadlockMsg);
			createMarker(file12,line12,deadlockMsg);
			createMarker(file21,line21,deadlockMsg);
			createMarker(file22,line22,deadlockMsg);
	}
	private void createMarker(IFile file, int line, String msg) throws CoreException
	{
		Map<String, Object> attributes = new HashMap<String, Object>();
		attributes.put(IMarker.LINE_NUMBER, line);
		attributes.put(IMarker.MESSAGE,msg);
		IMarker newMarker = file.createMarker(RaceMarker.TYPE_SCARIEST);
		newMarker.setAttributes(attributes);
	}
	private void showRace(IPath fullPath, TIDERace race) throws CoreException {
		String sig = race.sig;
		MemNode rnode = race.node1;
		MemNode wnode = race.node2;
int findex = sig.indexOf('.');
int lindex = sig.lastIndexOf('.');
if(findex!=lindex)
sig =sig.substring(0, lindex);//remove instance hashcode

		String raceMsg = "Race: "+sig+" ("+rnode.getSig()+", "+wnode.getSig()+")";
		System.err.println(raceMsg);


//IResource markerTarget = cu.getResource();
//IMarker[] existingMarkers = markerTarget.findMarkers(RaceMarker.TYPE_SCARIEST, true, IResource.DEPTH_ZERO);

		Map<String, Object> attributes_r = new HashMap<String, Object>();
		attributes_r.put(IMarker.LINE_NUMBER, rnode.getLine());
		attributes_r.put(IMarker.MESSAGE,raceMsg);
		IFile file1 = getFileFromSig(fullPath,rnode.getSig());
		IMarker newMarker_r = file1.createMarker(RaceMarker.TYPE_SCARIEST);
		newMarker_r.setAttributes(attributes_r);

		Map<String, Object> attributes_w = new HashMap<String, Object>();
		attributes_w.put(IMarker.LINE_NUMBER, wnode.getLine());
		attributes_w.put(IMarker.MESSAGE,raceMsg);
		IFile file2 = getFileFromSig(fullPath,wnode.getSig());
		IMarker newMarker_w = file2.createMarker(RaceMarker.TYPE_SCARIEST);
		newMarker_w.setAttributes(attributes_w);
	}

	private IFile getFileFromSig(IPath fullPath, String sig)//":"
	{
		String name = sig.substring(0,sig.indexOf(':'));
		if(name.contains("$"))
			name=name.substring(0, name.indexOf("$"));
		name=name+".java";

//		IPath path = file.getFullPath();//file.getProjectRelativePath();
//
//			System.out.println("path "+path+"\n name: "+name);

		IPath path = fullPath.append("src/").append(name);

    	 IFile file = ResourcesPlugin.getWorkspace().getRoot().getFile(path);
    	 return file;
	}

	private Iterable<Entrypoint> entryPoints;
	@Override
	protected Iterable<Entrypoint> getEntrypoints(AnalysisScope analysisScope, IClassHierarchy classHierarchy) {
		if(entryPoints==null)
		{
			entryPoints = findEntryPoints(classHierarchy,entrySignature);
		}
		return entryPoints;
	}

	public Iterable<Entrypoint> findEntryPoints(IClassHierarchy classHierarchy, String entrySignature) {
		final Set<Entrypoint> result = HashSetFactory.make();
		Iterator<IClass> classIterator = classHierarchy.iterator();
		while (classIterator.hasNext()) {
			IClass klass = classIterator.next();
			if (!AnalysisUtils.isJDKClass(klass)) {
				// Logger.log("Visiting class " + klass);
				//String classname = klass.getName().getClassName().toString();
				//String classpackage = klass.getName().getPackage().toString();

				for (IMethod method : klass.getDeclaredMethods()) {
					try {
//						if (!(method instanceof ShrikeCTMethod)) {
//							throw new RuntimeException("@EntryPoint only works for byte code.");
//						}
						//String methodname = method.getName().toString();
						if(method.isStatic()&&method.isPublic()
								&&method.getName().toString().equals("main")
								&&method.getDescriptor().toString().equals(ConvertHandler.DESC_MAIN))

							result.add(new DefaultEntrypoint(method, classHierarchy));
						else if(method.isPublic()&&!method.isStatic()
								&&method.getName().toString().equals("run")
								&&method.getDescriptor().toString().equals("()V"))
						{
							if (AnalysisUtils.implementsRunnableInterface(klass) || AnalysisUtils.extendsThreadClass(klass))
							result.add(new DefaultEntrypoint(method, classHierarchy));

						}
					} catch (Exception e) {
						throw new RuntimeException(e);
					}
				}
			}
		}

		return new Iterable<Entrypoint>() {
			public Iterator<Entrypoint> iterator() {
				return result.iterator();
			}
		};

	}

	@Override
	protected Collection<CGNode> inferRoots(CallGraph cg) throws WalaException {
		return InferGraphRoots.inferRoots(cg);
	}

	public PointerAnalysis getPointerAnalysis() {
		return engine.getPointerAnalysis();
	}

	public IClassHierarchy getClassHierarchy() {
		return engine.getClassHierarchy();
	}
	public CGNode updateCallGraph(com.ibm.wala.classLoader.IMethod m_old,
			com.ibm.wala.classLoader.IMethod m, IR ir) {

		CGNode node = null;
		try{
			AstCallGraph cg = (AstCallGraph)callGraph;
			CGNode oldNode = cg.findOrCreateNode(m_old, Everywhere.EVERYWHERE);
			if(oldNode instanceof AstCGNode)
			{
				AstCGNode oldNode2 = (AstCGNode) oldNode;
				oldNode2.updateMethod(m,ir);

				//update call graph key
				cg.updateNode(m_old, m, Everywhere.EVERYWHERE,oldNode2);
			}
			node = oldNode;
			//System.out.println("DEBUG oldNode: "+System.identityHashCode(oldNode));

			//indicate builder has changed

			//engine.builder_echo.markChanged(oldNode);

//			CGNode newNode = cg.findOrCreateNode(m, Everywhere.EVERYWHERE);
//
//			cg.addNode(newNode);
//
//			Iterator<CGNode> iter = cg.getSuccNodes(oldNode);
//			cg.removeNode(oldNode);
//			while(iter.hasNext())
//			{
//				cg.addEdge(newNode, iter.next());
//			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		return node;
	}
	public void updatePointerAnalysis(CGNode node, IR ir_old, IR ir) {

    	//compute diff
    	SSAInstruction[] insts_old = ir_old.getInstructions();
    	SSAInstruction[] insts = ir.getInstructions();

    	HashMap<String,SSAInstruction> mapOld = new HashMap<String,SSAInstruction>();
    	HashMap<String,SSAInstruction> mapNew = new HashMap<String,SSAInstruction>();


        ControlFlowGraph<SSAInstruction, ISSABasicBlock> cfg_old = ir_old.getControlFlowGraph();
        ControlFlowGraph<SSAInstruction, ISSABasicBlock> cfg_new = ir.getControlFlowGraph();

//        for (Iterator<ISSABasicBlock> x = cfg.iterator(); x.hasNext();) {
//          BasicBlock b = (BasicBlock) x.next();
//       // visit each instruction in the basic block.
//          for (Iterator<SSAInstruction> it = b.iterator(); it.hasNext();) {
//        	  SSAInstruction inst = it.next();
//              if (inst != null) {
//
//            	  String str = inst.toString();
//        			if(str.indexOf('@')>0)
//        				str = str.substring(0,str.indexOf('@')-1);
//        			mapOld.put(str, inst);
//              }
//          }
//        }

    	for(int i=0;i<insts_old.length;i++)
    	{
    		SSAInstruction inst = insts_old[i];
    		if(inst!=null)
    		{
    			String str = inst.toString();
    			//TODO: JEFF  -- program counter may change, call graph
//    			if(str.indexOf('@')>0)
//    				str = str.substring(0,str.indexOf('@')-1);
    			mapOld.put(str, inst);
    		}
    	}
    	for(int i=0;i<insts.length;i++)
    	{
    		SSAInstruction inst = insts[i];
    		if(inst!=null)
    		{
    			String str = inst.toString();
    			//TODO: JEFF
//    			if(str.indexOf('@')>0)
//    				str = str.substring(0,str.indexOf('@')-1);

    			mapNew.put(str, inst);
    		}
    	}
    	//NOT WORKING
    	//int use = insts[6].getUse(1);
    	//SSAConversion.undoCopyPropagation( (AstIR)ir, 6, use);

    	HashMap<SSAInstruction,ISSABasicBlock> deleted = new HashMap<SSAInstruction,ISSABasicBlock>();
    	HashMap<SSAInstruction,ISSABasicBlock> added = new HashMap<SSAInstruction,ISSABasicBlock>();

    	for(String s:mapOld.keySet())
    	{
    		if(!mapNew.keySet().contains(s))//removed from new
    		{
    			SSAInstruction inst = mapOld.get(s);

    			if(inst instanceof SSAFieldAccessInstruction
    					|| inst instanceof SSAAbstractInvokeInstruction
    					|| inst instanceof SSAArrayReferenceInstruction
    					)
    			{
        			ISSABasicBlock bb = cfg_old.getBlockForInstruction(inst.iindex);
        			deleted.put(inst,bb);
    			}

    		}
    	}
    	for(String s:mapNew.keySet())
    	{
    		if(!mapOld.keySet().contains(s))//removed from new
    		{
    			SSAInstruction inst = mapNew.get(s);
    			ISSABasicBlock bb = cfg_new.getBlockForInstruction(inst.iindex);
    			added.put(inst,bb);
    		}
    	}
    	//added.removeAll(mapOld.keySet());
    	//deleted.removeAll(mapNew.keySet());


    	if(false)
        	{
        	if(!deleted.isEmpty())
        	{
        		System.err.println("Deleted Instructions");

	        	for(Object o: deleted.keySet())
	        		System.out.println(o);
        	}
        	if(!added.isEmpty())
        	{
        		System.err.println("Added Instructions");
	        	for(Object o: added.keySet())
	        		System.out.println(o);
        	}
    	}


//    	int size_old = insts_old.length;
//    	int size = insts.length;
//    	for(int i=0, j=0;i<size_old&&j<size;)
//    	{
//    		SSAInstruction i_old = insts_old[i];
//    		SSAInstruction i_new = insts[i];
//    		if(!i_old.equals(i_new))
//    		{
//
//    		}
//    	}

    	//UPDATE IR, CALL GRAPH, CHA, PTA
//    	model.getCache().getSSACache().updateMethodIR(m_old, Everywhere.EVERYWHERE, model.getOptions().getSSAOptions(),ir);

//    	HashSet set = new HashSet();
//    	set.add(class_old);
//    	loader_old.removeAll(set);

		engine.updatePointerAnalaysis(node, added,deleted,ir_old);
	}
}
